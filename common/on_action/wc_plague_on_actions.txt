# PLAGUE ON ACTIONS
## PLAGUE ON ACTIONS
spread_plague_barony = {
	trigger = {			# On_actions can have triggers. If an on_action fires and its trigger returns false, nothing happens
		exists = scope:plagued_barony
		scope:plagued_barony = {
			title_province = {
				has_province_modifier = plague_province_modifier
			}
		}
		exists = scope:plaguer
	}

	effect = {
		scope:plagued_barony.county = {
			if = {
				limit = {
					any_county_province = {
						NOT = {
							has_province_modifier = plague_province_modifier
						}
					}
				}
				random_county_province = {
					limit = {
						NOT = {
							has_province_modifier = plague_province_modifier
						}
					}

					barony = {
						save_scope_as = plagued_barony
					}
					
					plague_barony = {
						PLACE = scope:plagued_barony
						PLAGUER = scope:plaguer
					}

					trigger_event = {
						on_action = spread_plague_barony
						months = 6
					}
				}
			}
			else_if = {
				limit = {
					any_neighboring_county = {
						any_county_province = {
							NOT = {
								has_province_modifier = plague_province_modifier
							}
						}
					}
				}
				random_neighboring_county = {
					limit = {
						any_county_province = {
							NOT = {
								has_province_modifier = plague_province_modifier
							}
						}
					}
					random_county_province = {
						limit = {
							NOT = {
								has_province_modifier = plague_province_modifier
							}
						}

						barony = {
							save_scope_as = plagued_barony
						}
						
						plague_barony = {
							PLACE = scope:plagued_barony
							PLAGUER = scope:plaguer
						}

						trigger_event = {
							on_action = spread_plague_barony
							months = 6
						}
					}
				}
			}
			else_if = {
				limit = {
					any_connected_county = {
						any_county_province = {
							NOT = {
								has_province_modifier = plague_province_modifier
							}
						}
					}
				}
				random_connected_county = {
					limit = {
						any_county_province = {
							NOT = {
								has_province_modifier = plague_province_modifier
							}
						}
					}
					random_county_province = {
						limit = {
							NOT = {
								has_province_modifier = plague_province_modifier
							}
						}

						barony = {
							save_scope_as = plagued_barony
						}
						
						plague_barony = {
							PLACE = scope:plagued_barony
							PLAGUER = scope:plaguer
						}

						trigger_event = {
							on_action = spread_plague_barony
							months = 6
						}
					}
				}
			}
			else = {
				# just kill the guy? massive something?
			}		
		}
	}
}

plague_method_selection = {
	first_valid_on_action = {
		standard_plague_method_selection
	}
}

standard_plague_method_selection = {
	random_events = {
		100 = plague_outcome.0101
	}
}

plague_setup = {
	# Occurs when you execute the murder scheme. Pick out the murder method set in murder_ongoing.0001.
	first_valid = {
		plague_outcome.1001 #Zombie outbreak
	}
}


plague_save_roll = {
	random_events = {
		200 = plague_save.9999 #Plague succeeds
	}
}

plague_save_response = {
	first_valid = {
		plague_save.1001
	}
}

plague_succeeded = {
	# Picks out the correct success event depending on setup.
	first_valid = {
		plague_outcome.2000 #Undead outbreak
	}
	effect = {
		play_music_cue = "mx_cue_murder"
	}
}

plague_failed = {
	# Picks out the correct failure event depending on setup/save.
	first_valid = {
		plague_outcome.4001
	}
}

plague_ongoing = {
	# Events that can happen while planning to murder someone.
	trigger = {
		exists = scope:scheme
	}
	
	random_events = {
		chance_to_happen = 10
		200 = 0
		################
		## Specific Scheme events#
		################
		5000 = plague_ongoing.3302			# Recruit cultists
		5000 = plague_ongoing.3303			# Contaminate food source
		################
		## Generic Intrigue Scheme events#
		################
		##Agents:
		200 = intrigue_scheme_ongoing.1001 	# Pay gold for Scheme Progress
		100 = intrigue_scheme_ongoing.1002 	# Zealous agent promotes your agenda
		100 = intrigue_scheme_ongoing.1004 	# A Gregarious agent is a little too loose-lipped
		100 = intrigue_scheme_ongoing.1006 	# A Lazy agent is a little careless
		30 = intrigue_scheme_ongoing.1007 	# Caring agent wants you to stop
		50 = intrigue_scheme_ongoing.1008 	# Agent close to being discovered
		50 = intrigue_scheme_ongoing.1009 	# Close relation is willing to join your scheme after all
		50 = intrigue_scheme_ongoing.2003 	# Discover a secret about someone else than your target
		50 = plague_ongoing.3010			# Drunkard Agent
		100 = intrigue_scheme_ongoing.5019 	# Find old architectural papers
		100 = intrigue_scheme_ongoing.5026 	# Court chaplain is in on it
		
		##Target:
		100 = intrigue_scheme_ongoing.2001 	# Trusting target
		100 = intrigue_scheme_ongoing.2002 	# Drunkard target
		##Owner:
		50 = intrigue_scheme_ongoing.3001 	# Being Just Causes Stress
		50 = intrigue_scheme_ongoing.3002 	# Being Compassionate Causes Pain
		##Child target:
		200 = intrigue_scheme_ongoing.4001 	# Agent is put in charge of a group of children
		200 = intrigue_scheme_ongoing.4002 	# Child is gullible
		150 = intrigue_scheme_ongoing.4003 	# Agent has second thoughts
		##Other
		100 = intrigue_scheme_ongoing.5001 	# Distract guards with itching powder
		100 = intrigue_scheme_ongoing.5002 	# Convince mystic to give target omen
		100 = intrigue_scheme_ongoing.5005 	# Gift them poisonous gold
		100 = intrigue_scheme_ongoing.5009 	# "Friend of Animals" gets some help
		10 = intrigue_scheme_ongoing.5011 	# You mess up with venomous animals
		50 = intrigue_scheme_ongoing.5014 	# You buy them a plush and exotic carpet
		100 = intrigue_scheme_ongoing.5016 	# Lower their courtiers opinion of them
		50 = intrigue_scheme_ongoing.5017 	# Lower their spouse's opinion of them
		100 = intrigue_scheme_ongoing.5018 	# Target at war - send camp followers to them
		100 = intrigue_scheme_ongoing.5024 	# Encourage local celebration
		50 = plague_ongoing.3301 			# Lose your knife
		100 = intrigue_scheme_ongoing.3005 	# Messenger pigeon
		100 = intrigue_scheme_ongoing.3003 	# Mapping the local surroundings
		
		#############
		# Lifestyle events
		#############
		100 = intrigue_scheme_lifestyle.1001 	# Opportunity for a general to set up a soldier spy ring
		50 = intrigue_scheme_lifestyle.1002 	# Your soldier spy ring has been compromised!
		100 = intrigue_scheme_lifestyle.3001 	# Study the targets habits
		100 = intrigue_scheme_lifestyle.3101 	# Convert informants in target´s court
		50 = intrigue_scheme_lifestyle.3102 	# Informants are revealed!
		100 = intrigue_scheme_lifestyle.3201 	# Intercept communication
		100 = intrigue_scheme_lifestyle.3301 	# Possible to gain hook - ends the scheme
		100 = intrigue_scheme_lifestyle.3401 	# Convince courtier at target's court to inform on them
	}
}

## PURGE ON ACTIONS
### START ON ACTIONS
purge_start_pulse = {
	first_valid_on_action = {
		purge_start_pulse_aux
		purge_start_pulse_transition
	}
}

purge_start_pulse_aux = {
	trigger = {
		root = {
			has_variable = purge_event_tick
			var:purge_event_tick < 10
		}
	}

	random_events = {
		1 = purge.0011
		100 = purge.0010
	}
}

purge_start_pulse_transition = {
	trigger = {
		root = {
			has_variable = purge_event_tick
			var:purge_event_tick >= 10
		}
	}

	effect = {
		root = {
			set_variable = {
				name = purge_event_tick
				value = 0
			}
		}
		trigger_event = {
			on_action = purge_middle_pulse
			days = 2
		}
	}
}

### MIDDLE ACTIONS
purge_middle_pulse = {
	first_valid_on_action = {
		purge_middle_pulse_aux
		purge_middle_pulse_transition
	}
}

purge_middle_pulse_aux = {
	trigger = {
		root = {
			has_variable = purge_event_tick
			var:purge_event_tick < 10
		}
	}

	random_events = {
		1 = purge.1001
		100 = purge.1000
	}
}

purge_middle_pulse_transition = {
	trigger = {
		root = {
			has_variable = purge_event_tick
			var:purge_event_tick >= 10
		}
	}

	effect = {
		root = {
			set_variable = {
				name = purge_event_tick
				value = 0
			}
		}
		trigger_event = {
			on_action = purge_end_pulse
			days = 2
		}
	}
}

### END ACTIONS
purge_end_pulse = {
	first_valid_on_action = {
		purge_end_pulse_aux
		purge_end_pulse_transition
	}
}

purge_end_pulse_aux = {
	trigger = {
		root = {
			has_variable = purge_event_tick
			var:purge_event_tick < 10
		}
	}

	random_events = {
		1 = purge.0101
		100 = purge.0100
	}
}

purge_end_pulse_transition = {
	trigger = {
		root = {
			has_variable = purge_event_tick
			var:purge_event_tick >= 10
		}
	}

	effect = {
		purge_barony = {
			PURGER = root
			PLACE = var:purge_event_barony
		}

		remove_variable = purge_event_tick
		remove_variable = purge_event_barony
	}
}