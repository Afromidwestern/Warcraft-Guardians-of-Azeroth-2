#plague scheme
plague = {
	skill = intrigue
	hostile = yes
	
	allow = {
		is_imprisoned = no
		is_ruler = yes
		
		has_trait = lich_king
		
		scope:target = {
			is_ruler = yes
		}
	}
	
	valid = {
		# Warcraft
		NOT = { is_isolated_from_trigger = { target = scope:target } }
		
		#Have I been blocked from targeting this character?
		custom_description = { #Permanent
			text = plague_scheme_blocked
			subject = scope:target

			NOT = {
				scope:target = {
					has_character_flag = block_plague_scheme
				}
			}
		}
		scope:target = {
			exists = location
		}
	}

	valid_agent = {
		age >= age_14_value
	}
	
	agent_join_chance = {
		base = 0
		
		# Base
		modifier = {
			add = -100
			desc = BASE_RELUCTANCE
		}

		#Target will never scheme against themselves
		modifier = {
			add = -1000
			this = scope:target
			desc = SCHEME_NOT_AGAINST_SELF
		}
		
		#Target is not diplomatically available
		modifier = {
			add = -1000
			is_diplomatically_available = no
			desc = SCHEME_NOT_DIPLOMATICALLY_AVAILABLE
		}

		# AI Energy, both positive and negative energy will affect possitively
		modifier = {
			add = {
				value = 0
				if = {
					limit = {
						ai_energy < 0
					}
					add = {
						value = ai_energy
						multiply = -0.5
					}
				}
				else = {
					add = {
						value = ai_energy
						multiply = 0.5
					}
				}
			}
			desc = SCHEME_AGENT_JOIN_AI_ENERGY
		}

		# AI Rationality, negative rationality increases chances, positive decreases
		modifier = {
			add = {
				value = ai_rationality
				multiply = -0.5
			}
			desc = SCHEME_AGENT_JOIN_AI_RATIONALITY
		}

		# Agents dont want to murder their descendants
		modifier = {
			add = -100
			OR = {
				is_great_grandparent_of = scope:target
				is_grandparent_of = scope:target
				is_parent_of = scope:target
			}
			desc = SCHEME_NOT_AGAINST_DESCENDANTS
		}

		# Vengefulness
		modifier = {
			trigger = {
				ai_vengefulness > 0
				NOT = { this = scope:target }
				OR = {
					has_opinion_modifier = {
						modifier = murdered_close_family_crime
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = attempted_murder_close_family_crime
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = executed_close_family
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = slept_with_spouse_discovered_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = slept_with_spouse_exposed_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = unfaithful_spouse_discovered_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = unfaithful_spouse_exposed_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = refused_to_renounce_lover_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = betrayed_our_promise
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = botched_my_treatment_crime_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = botched_treatment_of_kin_crime_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = smeared_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = insulted_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = mocked_me_in_time_of_need
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = loved_one_dungeon_death
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = abandoned_me_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = reason_child_died
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = falsely_accused
						target = scope:target
					}
					opinion = {
						target = scope:target
						value <= -20
					}
				}
			}
			add = {
				value = ai_vengefulness
				multiply = 0.5
			}
			desc = SCHEME_I_MUST_TAKE_VENGEANCE
		}

		# Claimant on the same title/s (AI Greed)
		modifier = {
			trigger = {
				is_ruler = yes
				ai_greed > 0
				any_held_title = {
					scope:target = {
						has_claim_on = prev
					}
				}
				NOR = {
					is_great_grandparent_of = scope:target
					is_grandparent_of = scope:target
					is_parent_of = scope:target
				}
				opinion = {
					target = scope:target
					value <= low_negative_opinion
				}
			}
			add = {
				value = ai_greed
				multiply = 0.1
			}
			desc = SCHEME_GET_RID_OF_UNRULY_CLAIMANT
		}

		#Is Owner sending a gift in the invite interaction?
		modifier = {
			add = {
				value = bribe_acceptance_value
				multiply = 0.5
			}
			exists = scope:gift
			always = scope:gift
			desc = SCHEME_WITH_GIFT
		}

		#Hook
		modifier = {
			exists = scope:hook
			scope:hook = yes
			add = 100
			desc = SCHEME_WEAK_HOOK_USED
		}

		# Duty Focus
		modifier = {
			scope:target = {
				has_focus = stewardship_duty_focus
			}
			add = -25
			desc = SCHEME_DUTY_FOCUS
		}

		# Intimidated by target
		modifier = {
			trigger = {
				has_dread_level_towards = {
					target = scope:target
					level = 1
				}
			}
			add = 25
			desc = SCHEME_I_AM_INTIMIDATED
		}

		# Intimidated by owner
		modifier = {
			trigger = {
				has_dread_level_towards = {
					target = scope:owner
					level = 1
				}
			}
			add = 25
			desc = SCHEME_I_AM_INTIMIDATED
		}

		# Cowed by target
		modifier = {
			trigger = {
				has_dread_level_towards = {
					target = scope:target
					level = 2
				}
			}
			add = 50
			desc = SCHEME_I_AM_COWED
		}

		# Cowed by owner
		modifier = {
			trigger = {
				has_dread_level_towards = {
					target = scope:owner
					level = 2
				}
			}
			add = 50
			desc = SCHEME_I_AM_COWED
		}

		# AI compassion
		modifier = { # Characters with a sadistic streak are more likely to join
			add = {
				value = ai_compassion
				multiply = -0.75
			}
			desc = COMPASSIONATE_NEGATIVE_REASON
		}

		# Zeal vs other Faiths
		modifier = {
			add = {
				value = {
					add = {
						value = ai_zeal
						if = {
							limit = {
								faith = {
									faith_hostility_level = {
										target = scope:owner.faith
										value = faith_astray_level
									}
								}
							}
							multiply = -0.5
						}
						else_if = {
							limit = {
								faith = {
									faith_hostility_level = {
										target = scope:owner.faith
										value = faith_hostile_level
									}
								}
							}
							multiply = -0.75
						}
						else_if = {
							limit = {
								faith = {
									faith_hostility_level = {
										target = scope:owner.faith
										value = faith_evil_level
									}
								}
							}
							multiply = -1
						}
						else = {
							multiply = 0
						}
					}
				}
				if = {
					limit = {
						OR = {
							has_trait = devoted
							has_trait = faith_warrior
							has_trait = order_member
						}
					}
					multiply = 2
				}
				else_if = {
					limit = {
						OR = {
							has_trait = blood_of_prophet
							has_trait = consecrated_blood
							has_trait = divine_blood
						}
					}
					multiply = 5
				}
				else_if = {
					limit = {
						OR = {
							has_trait = saint
							has_trait = savior
						}
					}
					multiply = 10
				}
				else = {
					multiply = 1
				}
			}
			desc = SCHEME_ZEALOUS_AGAINST_HEATHEN
		}

		# How much does the Agent like the Target? Modified by AI honor
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:target }
				opinion = {
					target = scope:target
					value >= 0
				}
			}
			who = this
			opinion_target = scope:target
			multiplier = {
				value = -0.5
				add = {
					value = this.ai_honor
					multiply = -0.005
				}
			}
			desc = SCHEME_I_LIKE_TARGET
		}

		# How much does the Agent dislike the Target? Modified by AI honor
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:target }
				opinion = {
					target = scope:target
					value < 0
				}
			}
			who = this
			opinion_target = scope:target
			multiplier = {
				value = -0.5
				add = {
					value = this.ai_honor
					multiply = -0.005
				}
			}
			desc = SCHEME_I_DISLIKE_TARGET
		}

		# How much does the Agent like the Owner? Modified by AI honor
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:owner }
				opinion = {
					target = scope:owner
					value >= 0
				}
			}
			who = this
			opinion_target = scope:owner
			multiplier = {
				value = 0.5
				add = {
					value = this.ai_honor
					multiply = 0.005
				}
			}
			desc = SCHEME_MY_OPINION_OF_YOU
		}

		# How much does the Agent dislike the Owner? Modified by AI honor
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:owner }
				opinion = {
					target = scope:owner
					value < 0
				}
			}
			who = this
			opinion_target = scope:owner
			multiplier = {
				value = 0.5
				add = {
					value = this.ai_honor
					multiply = 0.005
				}
			}
			desc = SCHEME_MY_OPINION_OF_YOU
		}

		#Rivals are more keen on seeing their enemy dead
		modifier = {
			add = 25
			has_relation_rival = scope:target
			desc = SCHEME_AGAINST_RIVAL
		}

		# Nemesis should be even more inclined
		modifier = {
			add = 50
			has_relation_nemesis = scope:target
			desc = SCHEME_AGAINST_RIVAL
		}

		#Friends don't want to kill friends
		modifier = {
			add = -25
			has_relation_friend = scope:target
			desc = SCHEME_AGAINST_FRIEND
		}

		# Best Friend should be even less inclined
		modifier = {
			add = -50
			has_relation_best_friend = scope:target
			desc = SCHEME_AGAINST_FRIEND
		}

		#A Spouse that likes their spouse does not want them dead
		modifier = {
			add = -50
			trigger = {
				ai_compassion >= 0
				is_consort_of = scope:target
			}
			opinion = {
				target = scope:target
				value > low_positive_opinion
			}
			desc = SCHEME_AGAINST_SPOUSE
		}

		#Characters whose Faith has 'Sacred Lies' are inherently predisposed to joining schemes
		modifier = {
			add = 25
			faith = {
				has_doctrine_parameter = adherents_more_likely_to_join_schemes
			}
			desc = SCHEME_IS_SACRED
		}

		# Traits Modifiers
		modifier = {
			OR = {
				has_trait = being_undead
				has_trait = creature_lich
				has_trait = creature_wickerman
				has_trait = creature_wicker_behemoth
				has_trait = creature_wicker_golem
			}
			add = 100
			desc = SCHEME_AGENT_JOIN_UNDEAD
		}
	
		modifier = {
			has_trait = being_void
			add = 75
			desc = SCHEME_AGENT_JOIN_VOID
		}

		modifier = {
			has_trait = creature_nathrezim
			add = 75
			desc = SCHEME_AGENT_JOIN_NATHREZIM
		}

		modifier = {
			has_trait = torturer
			add = 50
			desc = SCHEME_AGENT_JOIN_TORTURER
		}

		modifier = {
			has_trait = physician_1
			add = 5
			desc = SCHEME_AGENT_JOIN_PHYSICIAN
		}

		modifier = {
			has_trait = physician_2
			add = 10
			desc = SCHEME_AGENT_JOIN_PHYSICIAN
		}

		modifier = {
			has_trait = physician_3
			add = 25
			desc = SCHEME_AGENT_JOIN_PHYSICIAN
		}

		modifier = {
			has_trait = flagellant
			add = 50
			desc = SCHEME_AGENT_JOIN_FLAGELLANT
		}

		modifier = {
			has_trait = excommunicated
			add = 10
			desc = SCHEME_AGENT_JOIN_EXCOMMUNICATED
		}

		modifier = {
			has_trait = kinslayer_1
			add = 5
			desc = SCHEME_AGENT_JOIN_KINSLAYER
		}

		modifier = {
			has_trait = kinslayer_2
			add = 10
			desc = SCHEME_AGENT_JOIN_KINSLAYER
		}

		modifier = {
			has_trait = kinslayer_3
			add = 25
			desc = SCHEME_AGENT_JOIN_KINSLAYER
		}

		modifier = {
			has_trait = cannibal
			add = 50
			desc = SCHEME_AGENT_JOIN_CANNIBAL
		}

		modifier = {
			has_trait = murderer
			add = 10
			desc = SCHEME_AGENT_JOIN_MURDERER
		}

		modifier = {
			has_trait = disinherited
			add = 5
			desc = SCHEME_AGENT_JOIN_DISINHERITED
		}

		modifier = {
			has_trait = family_first
			add = -50
			desc = SCHEME_AGENT_JOIN_TRAIT_FAMILY_FIRST
		}

		modifier = {
			has_focus = diplomacy_family_focus
			add = -50
			desc = SCHEME_AGENT_JOIN_FOCUS_FAMILY
		}

		# Difficulty
		modifier = {
			add = -10
			is_ai = yes
			scope:target = {
				is_ai = no
			}
			has_game_rule = easy_difficulty
			desc = "easy_difficulty"
		}
		modifier = {
			add = -20
			is_ai = yes
			scope:target = {
				is_ai = no
			}
			has_game_rule = very_easy_difficulty
			desc = "very_easy_difficulty"
		}
	}
	
	base_success_chance = {
		base = 0

		# Skill modifiers
		modifier = {
			add = {
				value = scope:owner.learning
				multiply = 0.5
			}
			desc = "SCHEME_BASE_SUCCESS_LEARNING"
		}

		modifier = {
			add = {
				value = scope:owner.diplomacy
				multiply = 0.25
			}
			desc = "SCHEME_BASE_SUCCESS_DIPLOMACY"
		}

		modifier = {
			add = {
				value = scope:owner.martial
				multiply = 0.25
			}
			desc = "SCHEME_BASE_SUCCESS_MARTIAL"
		}

		modifier = {
			add = {
				value = scope:target.learning
				multiply = -0.5
			}
			desc = "SCHEME_BASE_SUCCESS_TARGET_LEARNING"
		}

		modifier = {
			add = {
				value = scope:target.diplomacy
				multiply = -0.25
			}
			desc = "SCHEME_BASE_SUCCESS_TARGET_DIPLOMACY"
		}

		modifier = {
			add = {
				value = scope:target.martial
				multiply = -0.25
			}
			desc = "SCHEME_BASE_SUCCESS_TARGET_MARTIAL"
		}

		# Minor Lifestyle Perk protection for Courtiers
		modifier = { 
			add = {
				value = 0
				subtract = prepared_for_anything_perk_secondary_percentage
			}
			scope:target = {
				is_alive = yes
				is_ruler = no
				exists = court_owner
				court_owner = {
					has_perk = prepared_for_anything_perk
				}
				NOT = { court_owner = scope:owner }
				NOT = { has_perk = prepared_for_anything_perk }
			}
			desc = "SCHEME_PREPARED_FOR_ANYTHING_LIEGE_PERK_MODIFIER"
		}

		# Vengeful Bonus
		modifier = { 
			add = vengeful_scheme_success_chance_modifier
			scope:owner = {
				has_trait = vengeful
				OR = {
					has_relation_rival = scope:target	
					has_relation_nemesis = scope:target
				}
			}
			desc = "SCHEME_VENGEFUL_RIVAL"
		}
		
		# At War
		first_valid = {
			modifier = {
				add = -50
				desc = "SCHEME_AT_WAR"
				scope:target = {
					is_at_war_with = scope:owner
				}
			}
			modifier = {
				add = -25
				scope:target = {
					is_landed = no
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
			modifier = {
				add = -25
				scope:target = {
					is_landed = yes
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
		}

		# Difficulty
		modifier = {
			add = -25
			has_game_rule = easy_difficulty
			scope:owner = {
				is_ai = yes
			}
			scope:target = {
				is_ai = no
			}
			desc = "SCHEME_SUCCESS_DIFFICULTY_EASY"
		}
		
		modifier = {
			add = -75
			has_game_rule = very_easy_difficulty
			scope:owner = {
				is_ai = yes
			}
			scope:target = {
				is_ai = no
			}
			desc = "SCHEME_SUCCESS_DIFFICULTY_VERY_EASY"
		}

		# Lifestyle modifiers

		modifier = {
			add = 10
			scope:owner = { has_trait = lifestyle_herbalist }
			desc = SCHEME_BASE_SUCCESS_HERBALIST
		}

		modifier = {
			add = 10
			scope:owner = { has_trait = lifestyle_mystic }
			desc = SCHEME_BASE_SUCCESS_MYSTIC
		}

		modifier = {
			add = 10
			scope:owner = { has_trait = lifestyle_physician }
			desc = SCHEME_BASE_SUCCESS_PHYSICIAN
		}

		# Trait modifiers
		modifier = {
			add = 10
			scope:owner = { has_trait = whole_of_body }
			desc = SCHEME_BASE_SUCCESS_WHOLE_OF_BODY
		}

		modifier = {
			add = 10
			scope:owner = { has_trait = torturer }
			desc = SCHEME_BASE_SUCCESS_TORTURER
		}

		modifier = {
			add = 10
			scope:owner = { has_trait = scholar }
			desc = SCHEME_BASE_SUCCESS_SCHOLAR
		}

		modifier = {
			add = 10
			scope:owner = { has_trait = witch }
			desc = SCHEME_BASE_SUCCESS_WITCH
		}
	}
	
	agent_success_chance = {
		base = 0
		
		#hostile_scheme_agent_success_chance_modifier = yes #Adds a value depending on their "closeness" to target
		first_valid = {
			modifier = {
				add = 25
				scope:target = {
					is_ruler = yes
				}
				has_council_position = councillor_spymaster
				scope:target.cp:councillor_spymaster = this
				desc = "SCHEME_AGENT_IS_SPYMASTER_IN_MY_COURT"
			}
			modifier = {
				add = 25
				scope:target = {
					is_ruler = no
				}
				has_council_position = councillor_spymaster
				exists = scope:target.liege.cp:councillor_spymaster
				scope:target.liege.cp:councillor_spymaster = this
				desc = "SCHEME_AGENT_IS_SPYMASTER"
			}
			modifier = {
				add = 25
				save_temporary_scope_as = physician
				scope:target = { has_relation_court_physician = scope:physician }
				desc = "SCHEME_AGENT_IS_COURT_PHYSICIAN"
			}
			modifier = {
				add = 25
				is_councillor_of = scope:target
				NOT = { has_council_position = councillor_spymaster }
				desc = "SCHEME_AGENT_IS_COUNCILLOR"
			}
			modifier = {
				add = 25
				is_powerful_vassal_of = scope:target
				desc = "SCHEME_AGENT_IS_POWERFUL_VASSAL"
			}
			modifier = {
				add = 15
				scope:target = {
					is_ruler = yes
				}
				is_ruler = yes
				desc = "SCHEME_AGENT_IS_VASSAL"
			}
			modifier = {
				add = 5
				is_courtier_of = scope:target
				desc = "SCHEME_AGENT_IS_COURTIER"
			}
			modifier = {
				add = 5
				is_foreign_court_or_pool_guest_of = scope:target
				desc =  "SCHEME_AGENT_IS_GUEST"
			}
			modifier = {
				add = 2 #FALLBACK
				desc = "SCHEME_AGENT_IS_FELLOW_COURTIER"
			}
		}
		first_valid = {	
			modifier = {
				add = 15
				has_relation_nemesis = scope:target
				desc = "SCHEME_AGENT_IS_NEMESIS"
			}
			modifier = {
				add = 10
				has_relation_rival = scope:target
				desc = "SCHEME_AGENT_IS_RIVAL"
			}
		}

		# Skill modifiers
		modifier = {
			add = {
				value = intrigue
				multiply = 0.5
			}
			desc = "SCHEME_AGENT_SUCCESS_INTRIGUE"
		}

		modifier = {
			add = {
				value = learning
				multiply = 0.25
			}
			desc = "SCHEME_AGENT_SUCCESS_LEARNING"
		}

		modifier = {
			add = {
				value = diplomacy
				multiply = 0.125
			}
			desc = "SCHEME_AGENT_SUCCESS_DIPLOMACY"
		}

		modifier = {
			add = {
				value = martial
				multiply = 0.125
			}
			desc = "SCHEME_AGENT_SUCCESS_MARTIAL"
		}

		# Lifestyle modifiers
		modifier = {
			add = 10
			has_trait = lifestyle_herbalist
			desc = SCHEME_AGENT_SUCCESS_HERBALIST
		}

		modifier = {
			add = 10
			has_trait = lifestyle_mystic
			desc = SCHEME_AGENT_SUCCESS_MYSTIC
		}

		modifier = {
			add = 10
			has_trait = lifestyle_physician
			desc = SCHEME_AGENT_SUCCESS_PHYSICIAN
		}

		# Trait modifiers
		modifier = {
			add = 10
			has_trait = whole_of_body
			desc = SCHEME_AGENT_SUCCESS_WHOLE_OF_BODY
		}

		modifier = {
			add = 10
			has_trait = torturer
			desc = SCHEME_AGENT_SUCCESS_TORTURER
		}

		modifier = {
			add = 10
			has_trait = scholar
			desc = SCHEME_AGENT_SUCCESS_SCHOLAR
		}

		modifier = {
			add = 10
			has_trait = witch
			desc = SCHEME_AGENT_SUCCESS_WITCH
		}
	}
	
	#agent_join_threshold = 5
	agent_leave_threshold = -50
		
	cooldown = { years = 5 }
	is_secret = yes
	base_secrecy = 15

	on_ready = {
		scheme_owner = {
			# trigger_event = murder_outcome.0001
			trigger_event = plague_outcome.0001
		}
	}

	on_invalidated = {
		if = {
			limit = {
				scope:owner = {
					is_ruler = no
				}
			}
			#TODO throw event
		}
		else_if = {
			limit = {
				NOT = {
					faith = faith:death_god
				}
			}
			#TODO throw event
		}
		else_if = {
			limit = {
				NOT = {
					primary_title.tier = tier_empire
				}
			}
			#TODO throw event
		}
	}

	on_agent_join = {
		#TODO here you can throw an event of a cultist, or, if needed, save them in a list so later you can give them the religion stuff
	}

	on_agent_leave = {
		#TODO random event of agent being like "they are plaguing and it's this guy", very low
	}

	on_monthly = {
		plague_scheme_discovery_chance_effect = yes
		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}
			scheme_owner = {
				trigger_event = {
					#on_action = murder_ongoing
					on_action = plague_ongoing
				}
			}
		}
	}
	
	power_per_skill_point = 2.0
	resistance_per_skill_point = 1.0
	power_per_agent_skill_point = 2

	spymaster_power_per_skill_point = 1
	spymaster_resistance_per_skill_point = 1
	
	minimum_progress_chance = 5
	maximum_progress_chance = 100
	
	minimum_secrecy = 0
	maximum_secrecy = 95

	minimum_success = 0
	maximum_success = 95

	# tier_resistance = 1
	
	success_desc = "PLAGUE_SUCCESS_DESC"
	discovery_desc = "PLAGUE_DISCOVERY_DESC"
}