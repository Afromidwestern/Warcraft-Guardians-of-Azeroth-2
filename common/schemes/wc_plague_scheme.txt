plague = {
	skill = intrigue
	hostile = yes
	
	allow = {
		age >= age_14_value
		is_imprisoned = no
	}
	
	valid = {
		always = yes
	}

	valid_agent = {
		age >= age_14_value
	}
	
	agent_join_chance = {
		base = 0
		
		# Base
		modifier = {
			add = -200
			desc = BASE_RELUCTANCE
		}

		#Target will never scheme against themselves
		modifier = {
			add = -1000
			this = scope:target
			desc = SCHEME_NOT_AGAINST_SELF
		}
		
		#Target is not diplomatically available
		modifier = {
			add = -1000
			is_diplomatically_available = no
			desc = SCHEME_NOT_DIPLOMATICALLY_AVAILABLE
		}

		# AI Energy, only negative applies positive interest
		modifier = {
			add = {
				value = ai_energy
				multiply = -0.125
			}
			desc = BASE_RELUCTANCE
		}

		# AI Rationality, only negative applies positive interest
		modifier = {
			add = {
				value = ai_rationality
				multiply = -0.125
			}
			desc = BASE_RELUCTANCE
		}

		# Agents dont want to murder their descendants
		modifier = {
			add = -100
			OR = {
				is_great_grandparent_of = scope:target
				is_grandparent_of = scope:target
				is_parent_of = scope:target
			}
			desc = SCHEME_NOT_AGAINST_DESCENDANTS
		}

		modifier = {
			trigger = {
				ai_vengefulness > 0
				NOT = { this = scope:target }
				OR = {
					has_opinion_modifier = {
						modifier = murdered_close_family_crime
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = attempted_murder_close_family_crime
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = executed_close_family
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = slept_with_spouse_discovered_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = slept_with_spouse_exposed_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = unfaithful_spouse_discovered_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = unfaithful_spouse_exposed_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = refused_to_renounce_lover_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = betrayed_our_promise
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = botched_my_treatment_crime_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = botched_treatment_of_kin_crime_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = smeared_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = insulted_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = mocked_me_in_time_of_need
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = loved_one_dungeon_death
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = abandoned_me_opinion
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = reason_child_died
						target = scope:target
					}
					has_opinion_modifier = {
						modifier = falsely_accused
						target = scope:target
					}
					opinion = {
						target = scope:target
						value <= -20
					}
				}
			}
			add = {
				value = ai_vengefulness
				multiply = 1
				divide = 8
			}
			desc = SCHEME_I_MUST_TAKE_VENGEANCE
		}

		# Claimant on the same title/s (AI Greed)
		modifier = {
			trigger = {
				is_ruler = yes
				ai_greed > 0
				any_held_title = {
					scope:target = {
						has_claim_on = prev
					}
				}
				NOR = {
					is_great_grandparent_of = scope:target
					is_grandparent_of = scope:target
					is_parent_of = scope:target
				}
				opinion = {
					target = scope:target
					value <= low_negative_opinion
				}
			}
			add = {
				value = ai_greed
				multiply = 1
				divide = 8
			}
			desc = SCHEME_GET_RID_OF_UNRULY_CLAIMANT
		}

		#Is Owner sending a gift in the invite interaction?
		modifier = {
			add = bribe_acceptance_value
			exists = scope:gift
			always = scope:gift
			# NOT = {
			# 	OR = {
			# 		scope:target = { is_parent_of = root }
			# 		root = { is_parent_of = scope:target }
			# 	}
			# }
			desc = "SCHEME_WITH_GIFT"
		}

		#Hook
		modifier = {
			exists = scope:hook
			scope:hook = yes
			add = 100
			desc = SCHEME_WEAK_HOOK_USED
		}

		# Duty Focus
		modifier = {
			scope:target = {
				has_focus = stewardship_duty_focus
			}
			add = -10
			desc = SCHEME_DUTY_FOCUS
		}

		# Intimidated
		modifier = {
			trigger = {
				has_dread_level_towards = {
					target = scope:target
					level = 1
				}
			}
			add = 100
			desc = SCHEME_I_AM_INTIMIDATED
		}

		# Cowed
		modifier = {
			trigger = {
				has_dread_level_towards = {
					target = scope:target
					level = 2
				}
			}
			add = 1000
			desc = SCHEME_I_AM_COWED
		}

		modifier = { # Characters with a sadistic streak are more likely to join
			trigger = {
				ai_compassion < high_negative_ai_value
				NOT = { this = scope:target }
			}
			add = {
				value = ai_compassion
				multiply = 0.1
			}
			desc = COMPASSIONATE_NEGATIVE_REASON
		}

		# Zeal vs other Faiths
		modifier = {
			add = {
				if = {
					limit = {
						OR = {
							has_trait = devoted
							has_trait = savior
							has_trait = divine_blood
							has_trait = blood_of_prophet
							has_trait = faith_warrior
							has_trait = saint
							has_trait = order_member
							has_trait = consecrated_blood
						}
					}
				}
				add = {
					value = ai_zeal
					if = {
						limit = {
							faith = {
								faith_hostility_level = {
									target = scope:owner.faith
									value = faith_astray_level
								}
							}
						}
						multiply = -0.0625
					}
					if = {
						limit = {
							faith = {
								faith_hostility_level = {
									target = scope:owner.faith
									value = faith_hostile_level
								}
							}
						}
						multiply = -0.125
					}
					else_if = {
						limit = {
							faith = {
								faith_hostility_level = {
									target = scope:owner.faith
									value = faith_evil_level
								}
							}
						}
						multiply = -0.25
					}
					else = {
						multiply = 0.25
					}
				}
				multiply = 2
			}
			desc = SCHEME_ZEALOUS_AGAINST_HEATHEN
		}

		# How much does the Agent like the Target? Modified by AI honor
		# Positive honor multiplier: Ranges -1 to -5
		# Negative honor multiplier: Ranges -1 to -0.2
		# Then multiplied by 1.5
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:target }
				opinion = {
					target = scope:target
					value >= low_positive_opinion
				}
			}
			who = this
			opinion_target = scope:target
			multiplier = {
				value = -1
				if = {
					limit = { this.ai_honor >= 0 }
					subtract = {
						value = this.ai_honor
						multiply = 0.025
					}
				}
				else = {
					subtract = {
						value = this.ai_honor
						multiply = 0.008
					}
				}
				multiply = 1.5
			}
			desc = SCHEME_I_LIKE_TARGET
		}

		# How much does the Agent dislike the Target? Modified by AI honor
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:target }
				opinion = {
					target = scope:target
					value <= low_negative_opinion
				}
			}
			who = this
			opinion_target = scope:target
			multiplier = {
				value = -0.5
				if = {
					limit = { ai_honor <= 0 }
					add = {
						value = ai_honor
						multiply = 0.00625 # Used to be 0.025
					}
				}
				else = {
					add = {
						value = ai_honor
						multiply = 0.005 # Used to be 0.008
					}
				}
			}
			desc = SCHEME_I_DISLIKE_TARGET
		}

		#How much does Agent like Owner?
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:owner }
			}
			who = this
			opinion_target = scope:owner
			multiplier = 0.25
			#step = 5
			desc = SCHEME_MY_OPINION_OF_YOU
		}

		#Rivals are more keen on seeing their enemy dead
		modifier = {
			add = 10
			has_relation_rival = scope:target
			desc = SCHEME_AGAINST_RIVAL
		}

		# Nemesis should be even more inclined
		modifier = {
			add = 1000
			has_relation_nemesis = scope:target
			desc = SCHEME_AGAINST_RIVAL
		}

		#Friends don't want to kill friends
		modifier = {
			add = -20
			has_relation_friend = scope:target
			desc = SCHEME_AGAINST_FRIEND
		}

		# Best Friend should be even less inclined
		modifier = {
			add = -2000
			has_relation_best_friend = scope:target
			desc = SCHEME_AGAINST_FRIEND
		}

		#A Spouse that likes their spouse does not want them dead
		modifier = {
			add = -10
			trigger = {
				ai_compassion >= 0
				is_consort_of = scope:target
			}
			opinion = {
				target = scope:target
				value > low_positive_opinion
			}
			desc = SCHEME_AGAINST_SPOUSE
		}

		#Characters whose Faith has 'Sacred Lies' are inherently predisposed to joining schemes
		modifier = {
			add = 20
			faith = {
				has_doctrine_parameter = adherents_more_likely_to_join_schemes
			}
			desc = SCHEME_IS_SACRED
		}

		modifier = {
			OR = {
				has_trait = being_undead
				has_trait = creature_lich
				has_trait = creature_wickerman
				has_trait = creature_wicker_behemoth
				has_trait = creature_wicker_golem
			}
			add = 100
		}
	
		modifier = {
			OR = {
				has_trait = being_void
				has_trait = creature_nathrezim
			}
			add = 50
		}

		modifier = {
			has_trait = torturer
			add = 50
			#desc = SCHEME_TORTURER_FOCUS
		}

		modifier = {
			has_trait = physician_1
			add = 20
		}

		modifier = {
			has_trait = physician_2
			add = 40
		}

		modifier = {
			has_trait = physician_3
			add = 60
		}

		modifier = {
			has_trait = flagellant
			add = 30
		}

		modifier = {
			has_trait = excommunicated
			add = 20
		}

		modifier = {
			has_trait = kinslayer_1
			add = 20
		}

		modifier = {
			has_trait = kinslayer_2
			add = 40
		}

		modifier = {
			has_trait = kinslayer_3
			add = 60
		}

		modifier = {
			has_trait = cannibal
			add = 50
		}

		modifier = {
			has_trait = murderer
			add = 50
		}

		modifier = {
			has_trait = disinherited
			add = 20
		}

		modifier = {
			has_trait = family_first
			add = -100
		}

		modifier = {
			has_focus = diplomacy_family_focus
			add = -100
		}

		# Difficulty
		modifier = {
			add = -10
			is_ai = yes
			scope:target = {
				is_ai = no
			}
			has_game_rule = easy_difficulty
			desc = "easy_difficulty"
		}
		modifier = {
			add = -20
			is_ai = yes
			scope:target = {
				is_ai = no
			}
			has_game_rule = very_easy_difficulty
			desc = "very_easy_difficulty"
		}
	}
	
	base_success_chance = {
		base = 0

		modifier = {
			add = {
				value = scope:owner.learning
				multiply = 2
			}
		}

		modifier = {
			add = {
				value = scope:owner.diplomacy
				multiply = 0.25
			}
		}

		modifier = {
			add = {
				value = scope:owner.martial
				multiply = 0.25
			}
		}

		modifier = {
			add = {
				value = scope:target.learning
				multiply = -2
			}
		}

		modifier = {
			add = {
				value = scope:target.learning
				multiply = -0.25
			}
		}

		modifier = {
			add = {
				value = scope:target.martial
				multiply = -0.25
			}
		}

		modifier = { # Minor Lifestyle Perk protection for Courtiers
			add = {
				value = 0
				subtract = prepared_for_anything_perk_secondary_percentage
			}
			scope:target = {
				is_alive = yes
				is_ruler = no
				exists = court_owner
				court_owner = {
					has_perk = prepared_for_anything_perk
				}
				NOT = { court_owner = scope:owner }
				NOT = { has_perk = prepared_for_anything_perk }
			}
			desc = "SCHEME_PREPARED_FOR_ANYTHING_LIEGE_PERK_MODIFIER"
		}

		modifier = { # Vengeful Bonus
			add = vengeful_scheme_success_chance_modifier
			scope:owner = {
				has_trait = vengeful
				OR = {
					has_relation_rival = scope:target	
					has_relation_nemesis = scope:target
				}
			}
			desc = "SCHEME_VENGEFUL_RIVAL"
		}
		
		# At War
		first_valid = {
			modifier = {
				add = -50
				desc = "SCHEME_AT_WAR"
				scope:target = {
					is_at_war_with = scope:owner
				}
			}
			modifier = {
				add = -25
				scope:target = {
					is_landed = no
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
			modifier = {
				add = -25
				scope:target = {
					is_landed = yes
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
		}

		# Difficulty
		modifier = {
			add = -25
			has_game_rule = easy_difficulty
			scope:owner = {
				is_ai = yes
			}
			scope:target = {
				is_ai = no
			}
			desc = "SCHEME_SUCCESS_DIFFICULTY_EASY"
		}
		
		modifier = {
			add = -75
			has_game_rule = very_easy_difficulty
			scope:owner = {
				is_ai = yes
			}
			scope:target = {
				is_ai = no
			}
			desc = "SCHEME_SUCCESS_DIFFICULTY_VERY_EASY"
		}
	}
	
	agent_success_chance = {
		base = 0
		
		#hostile_scheme_agent_success_chance_modifier = yes #Adds a value depending on their "closeness" to target
		first_valid = {
			modifier = {
				add = 75
				scope:target = {
					is_ruler = yes
				}
				has_council_position = councillor_spymaster
				scope:target.cp:councillor_spymaster = this
				desc = "SCHEME_AGENT_IS_SPYMASTER_IN_MY_COURT"
			}
			modifier = {
				add = 75
				scope:target = {
					is_ruler = no
				}
				has_council_position = councillor_spymaster
				exists = scope:target.liege.cp:councillor_spymaster
				scope:target.liege.cp:councillor_spymaster = this
				desc = "SCHEME_AGENT_IS_SPYMASTER"
			}
			modifier = {
				add = 75
				save_temporary_scope_as = physician
				scope:target = { has_relation_court_physician = scope:physician }
				desc = "SCHEME_AGENT_IS_COURT_PHYSICIAN"
			}
			modifier = {
				add = 25
				is_councillor_of = scope:target
				NOT = { has_council_position = councillor_spymaster }
				desc = "SCHEME_AGENT_IS_COUNCILLOR"
			}
			modifier = {
				add = 25
				is_powerful_vassal_of = scope:target
				desc = "SCHEME_AGENT_IS_POWERFUL_VASSAL"
			}
			modifier = {
				add = 15
				scope:target = {
					is_ruler = yes
				}
				is_ruler = yes
				desc = "SCHEME_AGENT_IS_VASSAL"
			}
			modifier = {
				add = 10
				is_courtier_of = scope:target
				desc = "SCHEME_AGENT_IS_COURTIER"
			}
			modifier = {
				add = 10
				is_foreign_court_or_pool_guest_of = scope:target
				desc =  "SCHEME_AGENT_IS_GUEST"
			}
			modifier = {
				add = 5 #FALLBACK
				desc = "SCHEME_AGENT_IS_FELLOW_COURTIER"
			}
		}
		first_valid = {	
			modifier = {
				add = 15
				has_relation_nemesis = scope:target
				desc = "SCHEME_AGENT_IS_NEMESIS"
			}
			modifier = {
				add = 10
				has_relation_rival = scope:target
				desc = "SCHEME_AGENT_IS_RIVAL"
			}
		}
		modifier = {
			add = intrigue
			desc =  "SCHEME_AGENT_INTRIGUE"
		}
		modifier = {
			add = {
				value = learning
				multiply = 0.5
			}
			#desc =  "SCHEME_AGENT_INTRIGUE"
		}
	}
	
	#agent_join_threshold = 5
	agent_leave_threshold = -50
		
	cooldown = { years = 5 }
	is_secret = yes
	base_secrecy = 15

	on_ready = {
		scheme_owner = {
			# trigger_event = murder_outcome.0001
			trigger_event = plague_outcome.0001
		}
	}

	on_monthly = {
		plague_scheme_discovery_chance_effect = yes
		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}			
			scheme_owner = {
				trigger_event = {
					#on_action = murder_ongoing
					on_action = plague_ongoing
				}
			}
		}
	}
	
	power_per_skill_point = 1.0
	resistance_per_skill_point = 1.0
	power_per_agent_skill_point = 3
	
	minimum_progress_chance = 5
	maximum_progress_chance = 90
	minimum_success = 0
	maximum_secrecy = 95
	maximum_success = 95
	
	success_desc = "PLAGUE_SUCCESS_DESC"
	discovery_desc = "PLAGUE_DISCOVERY_DESC"
}