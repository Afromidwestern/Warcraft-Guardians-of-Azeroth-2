# Warcraft
# create_roman_empire_scripted_effect = {
# create_roman_empire_holy_scripted_effect = {
# create_roman_empire_italy_scripted_effect = {
# mend_great_schism_scripted_effect = {
# restore_papacy_scripted_effect = {
# destroy_papacy_scripted_effect = {
# form_switzerland_scripted_effect = {
# form_austria_scripted_effect = {
# form_carolingian_empire_scripted_effect = {
# unite_burgundies_scripted_effect = {
# form_outremer_scripted_effect = {
# restore_sunni_caliphate_scripted_effect = {
# create_israel_scripted_effect = {
# create_rum_scripted_effect = {
declare_bloodline_holy_decision_effect = {
	save_scope_as = progenitor_holy_blood

	faith = {
		set_variable = {
			name = variable_savior_found
			value = yes
		}
		change_fervor = {
			value = 25
			desc = fervor_gain_holy_bloodline
		}
	}
	if = { #Temporal.
		limit = {
			root.faith.religious_head = root
		}
		add_trait = savior
		root.dynasty = {
			add_dynasty_prestige = 1000
			add_dynasty_prestige_level = 1
		}
	}
	else = { #Spiritual.
		add_trait = paragon
		root.dynasty = {
			add_dynasty_prestige = 500
		}
	}

	every_child = {
		even_if_dead = yes
		trigger_event = major_decisions.0101
	
		every_child = {
			even_if_dead = yes
			limit = { 
				OR = {
					is_grandchild_of = scope:progenitor_holy_blood 
					is_great_grandchild_of = scope:progenitor_holy_blood  
				}
			}
			trigger_event = major_decisions.0101

			every_child = {
				even_if_dead = yes
				limit = { 
					OR = {
						is_grandchild_of = scope:progenitor_holy_blood 
						is_great_grandchild_of = scope:progenitor_holy_blood  
					}
				}
				trigger_event = major_decisions.0101
			}
		}
	}
}

# Warcraft
# sicilian_parliament_building_scripted_effect = {
# sicilian_parliament_kingdom_split_scripted_effect = { #If the decision is taken when the ruler doesn't hold the entirety of k_sicily, it results in the Naples/Trinacria split. (this is the ruler)
# empower_sicilian_parliament_decision_scripted_effect = {
# promote_gothic_innovations_decision_scripted_effect = {
# promote_hungarian_settlement_decision_scripted_effect = {
# revive_magyar_paganism_decision_scripted_effect = {
# restore_dumnonia_decision_scripted_effect = {
# revive_armenian_empire_decision_scripted_effect = {
# restore_holy_roman_empire_decision_scripted_effect = {
# found_kingdom_of_bosnia_decision_scripted_effect = {

# found_kingdom_of_livonia_decision_scripted_effect = {

# unite_bene_israel_effect = {

# hre_elector_list_save_effect = {
	# ordered_in_global_list = {
		# variable = hre_elector_list
		# max = 7
		# check_range_bounds = no
		# order_by = tier
		# save_temporary_scope_as = hre_elector_title
		# title:e_hre = {
			# if = {
				# limit = { NOT = { has_variable = hre_elector_1 } } 
				# set_variable = { name = hre_elector_1 value = scope:hre_elector_title }
			# }
			# else_if = {
				# limit = { NOT = { has_variable = hre_elector_2 } } 
				# set_variable = { name = hre_elector_2 value = scope:hre_elector_title }
			# }
			# else_if = {
				# limit = { NOT = { has_variable = hre_elector_3 } } 
				# set_variable = { name = hre_elector_3 value = scope:hre_elector_title }
			# }
			# else_if = {
				# limit = { NOT = { has_variable = hre_elector_4 } } 
				# set_variable = { name = hre_elector_4 value = scope:hre_elector_title }
			# }
			# else_if = {
				# limit = { NOT = { has_variable = hre_elector_5 } } 
				# set_variable = { name = hre_elector_5 value = scope:hre_elector_title }
			# }
			# else_if = {
				# limit = { NOT = { has_variable = hre_elector_6 } } 
				# set_variable = { name = hre_elector_6 value = scope:hre_elector_title }
			# }
			# else_if = {
				# limit = { NOT = { has_variable = hre_elector_7 } } 
				# set_variable = { name = hre_elector_7 value = scope:hre_elector_title }
			# }
		# }
	# }
# }
#Warcraft
create_bloodsail_kingdom_scripted_effect = {
	add_trait = forder
	#Create Bloodsail Kingdom, shift dejure/history/laws.
	hidden_effect = {
		every_held_title = { #Should shift all dejure of all Kingdoms owned at the time.
			limit = {
				tier = tier_kingdom
			}
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_duchy
				}
				set_de_jure_liege_title = title:_bloodsail_kingdom
				
			}
		}
	}
	create_title_and_vassal_change = {
		type = created
		save_scope_as = change
		add_claim_on_loss = no
	}
	title:k_bloodsail_kingdom = {
		change_title_holder = {
			holder = root
			change = scope:change
		}
		set_variable = {
			name = variable_restored_hre #Used for flavor later.
			value = yes
		}	
		copy_title_history = title:k_plunder_isle
	}
	resolve_title_and_vassal_change = scope:change
	hidden_effect = { set_primary_title_to = title:k_bloodsail_kingdom }

	hidden_effect = {
		title:k_bloodsail_kingdom = {
			set_coa = e_hre_roman
			set_color_from_title = title:e_hre
		}
	}

	if = { #Automatically move capital to Rome.
		limit = {
			NOT = { capital_county = { this = title:c_daer_tiras } }
			exists = title:k_bloodsail_kingdom.holder
		}
		hidden_effect = {
			if = { #Usurp if not held personally.
				limit = {
					NOT = { title:c_daer_tiras.holder = { this = root } }
				}
				create_title_and_vassal_change = {
					type = returned
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:c_daer_tiras = {
					change_title_holder = {
						holder = root
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
		}
		title:k_bloodsail_kingdom.holder = { set_realm_capital = title:c_daer_tiras }
	}
	#hidden_effect = {
	#	create_story = restoring_roman_provinces_story
	#	add_character_flag = flag_restorer_of_rome #used for Eulogy.
	#}
}