#Scripted effects relating to Murder Schemes

#####################################################################
# EFFECT LIST
#####################################################################
# !!! Remember to add all new effects with a short description here !!!

#murder_outcome_roll_effect
#murder_success_effect
#murder_failure_effect

######################################################################
# EFFECTS
######################################################################

# plague_outcome_roll_setup_effect: calculates the discovery_chance
plague_outcome_roll_setup_effect = {
	#Discovery Roll setup
	save_scope_value_as = {
		name = discovery_chance
		value = {
			value = 100
			subtract = scope:scheme.scheme_secrecy
		}
	}
}

# plague_outcome_roll_effect: checks if the plague is succesful and discovered, then calls on the save or fail roll.
plague_outcome_roll_effect = {
	#SUCCESS ROLL
	random = {
		chance = scope:scheme.scheme_success_chance
		custom_tooltip = plague_successful_roll_tt
		save_scope_value_as = {
			name = scheme_successful
			value = yes
		}
	}
	### End Success roll
	#DISCOVERY ROLL
	custom_description_no_bullet = {
		text = in_addition_effect_tooltip
	}
	random = {
		chance = scope:discovery_chance
		custom_tooltip = scheme_remain_secret_roll_tt
		save_scope_value_as = {
			name = scheme_discovered
			value = yes
		}
		if = {
			limit = {
				exists = scope:target.host
			}
			scope:target.host = {
				save_scope_as = plague_exposer
			}
		}
		else = {
			scope:target = {
				save_scope_as = plague_exposer
			}
		}
	}
	### End Discovery roll

	hidden_effect = {
		#FIRE CORRECT ON ACTIONS
		if = {
			limit = {
				exists = scope:scheme_successful
			}
			trigger_event = {
				on_action = plague_succeeded
				days = 3
			}
		}
		else = {
			trigger_event = {
				on_action = plague_failed
				days = 3
			}
		}
	}
}


# plague_success_effect: calls a trigger for the plagued player and also deals with stress modifiers on the plaguer
# depending on personality and relationship with plagued player
plague_success_effect = {
	play_music_cue = mx_cue_murder
	
	scope:scheme.scheme_target = {
		trigger_event = plague_outcome.5001
	}

	show_as_tooltip = {
		plague_success_turn_undead_effect = yes
	}

	#Stress reduction
	if = {
		limit = {
			scope:scheme.scheme_owner = {
				has_trait = sadistic
			}
		}
		scope:scheme.scheme_owner = {
			stress_impact = {
				sadistic = major_stress_impact_loss
			}
		}
	}
	scope:scheme = {
		end_scheme = yes
	}
}

# plague_success_turn_undead_effect: triggers plague effects depending on if it is discovered or not
plague_success_turn_undead_effect = {
	if = {
		limit = {
			exists = scope:scheme_discovered
		}
		known_plague_effect = {
			VICTIM = scope:target
			PLACE = scope:scheme.var:plagued_barony 
			PLAGUER = scope:owner
			EXPOSER = scope:murder_exposer
		}
	}
	else = {
		if = {
			limit = { this = scope:owner }
			show_as_tooltip = {
				unknown_plague_effect = {
					VICTIM = scope:target
					PLACE = scope:scheme.var:plagued_barony 
					PLAGUER = scope:owner
				}
			}
		}
		else_if = {
			limit = { this = scope:target }
			custom_tooltip = plague_unknown_plague_against_you_was_successful
			hidden_effect = {
				unknown_plague_effect = {
					VICTIM = scope:target
					PLACE = scope:scheme.var:plagued_barony 
					PLAGUER = scope:owner
				}
			}
		}
	}
}

# plague_failure_effect: deals with secrets, opinion upon discovery...
plague_failure_effect = {
 	
	scope:target = {
		show_as_tooltip = {
			add_character_modifier = {
				modifier = watchful_modifier
				days = watchful_modifier_duration
			}
		}
	}

	if = {
		limit = {
			exists = scope:scheme_discovered
		}
		scope:owner = {
			save_scope_as = owner_to_reveal
			add_dread = minor_dread_gain
		}
		show_as_tooltip = {
			attempted_murder_opinion_effect = {
				VICTIM = scope:target
				MURDERER = scope:owner
			}
		}
		scope:target = {
			trigger_event = plague_outcome.5002
		}
	}
	#Add a murder attempt secret
	else = {
		scope:owner = {
			add_secret = {
				type = secret_plague_attempt
				target = scope:target
			}
		}
		scope:target = {
			trigger_event = plague_outcome.5002
		}
	}
}

# successful_plague_outcome_event_option_effect: resolves dread and stress effects on plague success
successful_plague_outcome_event_option_effect = {
	if = { # Dread for successfully murdering someone and getting discovered
		limit = {
			exists = scope:scheme_discovered
		}
		dread_from_discovered_murder_effect = yes
	}

	if = {
		limit = {
			faith = {
				has_doctrine_parameter = piety_gain_from_successful_intrigue_schemes
			}	
		}
		add_piety = minor_piety_gain
	}
}

# plague_scheme_discovery_chance_effect: Resolves discovery
plague_scheme_discovery_chance_effect = {
	#Check for targets that have different courts than the scheme owner
	if = {
		limit = {
			#Does the target have a Spymaster?
			exists = scope:target.host.cp:councillor_spymaster
		}
		#Save spymaster scope for later reference
		scope:target.host.cp:councillor_spymaster = {
			save_scope_as = spymaster
		}

		if = {
			limit = {
				is_scheme_exposed = no
				#Spymaster won't expose their own Scheme
				NOT = { scope:owner = scope:spymaster }
				#Spymaster won't expose *your* (liege's) Scheme
				NOT = { scope:owner = scope:spymaster.liege }
			}
			random = {
				chance = scope:spymaster.spymaster_plague_discovery_chance

				save_temporary_scope_value_as = {
					name = discover_scheme
					value = yes
				}
			}
		}

		#Discover agent or owner? We don't want both to happen at once
		random_list = {
			50 = { #AGENT
				trigger = {
					is_scheme_exposed = yes #Agents should only be exposed if the scheme already is exposed
					any_scheme_agent = {
						agent_valid_to_be_discovered_by_spymaster = yes
					}
				}
				random = {
					chance = scope:spymaster.spymaster_agent_discovery_chance

					save_temporary_scope_value_as = {
						name = discover_agent
						value = yes
					}
				}
			}

			50 = { #OWNER
				trigger = {
					is_scheme_exposed = yes #Owner should only be exposed if the scheme already is exposed
				}
				random = {
					chance = scope:spymaster.spymaster_owner_discovery_chance

					save_temporary_scope_value_as = {
						name = discover_owner
						value = yes
					}
				}
			}
		}

		if = {
			#Execution of scheme discovery
			limit = {
				exists = scope:discover_scheme
			}
			scope:target.host = {
				trigger_event = plague_scheme_discovery.2001
			}
			save_temporary_scope_value_as = {
				name = discovery_event_happening
				value = yes
			}
		}
		else_if = {
			#Execution of agent discovery
			limit = {
				exists = scope:discover_agent
			}
			random_scheme_agent = {
				limit = {
					agent_valid_to_be_discovered_by_spymaster = yes
				}
				weight = {
					base = 1
					modifier = {
						add = -0.5
						is_consort_of = scope:target
					}
				}
				save_scope_as = agent
			}
			scope:target.host = {
				trigger_event = plague_scheme_discovery.1001
			}
			save_temporary_scope_value_as = {
				name = discovery_event_happening
				value = yes
			}
		}
		else_if = {
			#Execution of owner discovery
			limit = {
				exists = scope:discover_owner
			}
			scope:target.host = {
				trigger_event = plague_scheme_discovery.1002
			}
			save_temporary_scope_value_as = {
				name = discovery_event_happening
				value = yes
			}
		}
	}
}