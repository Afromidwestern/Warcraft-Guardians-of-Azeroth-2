become_leader_of_faction_effect = {
	set_global_variable = {
		name = $faction$_leader
		value = this
	}
	add_to_global_variable_list = {
		name = $faction$_members
		target = this
	}
	set_variable = { name = pol_faction value = flag:$faction$ }
	add_alliances_with_faction_effect = { MEMBERS = $faction$_members }
	
	add_character_modifier = faction_leader_modifier
}
join_pol_faction_effect = {
	add_to_global_variable_list = {
		name = $faction$_members
		target = this
	}
	set_variable = { name = pol_faction value = flag:$faction$ }
	add_alliances_with_faction_effect = { MEMBERS = $faction$_members }
}
leave_pol_faction_effect = {
	remove_list_global_variable = {
		name = $faction$_members
		target = this
	}
	remove_variable = pol_faction
	# break_alliances_with_faction_effect = { MEMBERS = $faction$_members }
	if = {
		limit = { global_var:$faction$_leader = this }
		random_in_global_list = {
			variable = $faction$_members
			limit = { can_lead_faction_trigger = yes }
			become_leader_of_faction_effect = { faction = $faction$ }
		}
	}
	
	remove_character_modifier = faction_leader_modifier
	
	#No one can take your place, disband pol faction
	hidden_effect = {
		if = {
			limit = { global_var:$faction$_leader = this }
			remove_global_variable = $faction$_leader
			every_in_global_list = {
				variable = $faction$_members
				leave_pol_faction_effect = { faction = $faction$ }
			}
		}
	}
}
try_to_inherit_faction_effect = {
	if = {
		limit = { $PREV_HOLDER$ = global_var:$faction$_leader }
		if = {
			limit = { $PREV_HOLDER$ = { can_lead_faction_trigger = no } }
			if = {
				limit = { can_lead_faction_trigger = yes }
				become_leader_of_faction_effect = { faction = $faction$ }
			}
			# Must go after become_leader_of_faction_effect
			$PREV_HOLDER$ = { leave_pol_faction_effect = { faction = $faction$ } }
		}
	}
	else = {
		if = {
			limit = { $PREV_HOLDER$ = { common_faction_trigger = no } }
			$PREV_HOLDER$ = { leave_pol_faction_effect = { faction = $faction$ } }
			if = {
				limit = { common_faction_trigger = yes }
				join_pol_faction_effect = { faction = $faction$ }
			}
		}
	}
}

add_alliances_with_faction_effect = {
	save_temporary_scope_as = alliance_actor
	every_in_global_list = {
		variable = $MEMBERS$
		limit = {
			NOT = { this = scope:alliance_actor }
			NOT = { is_allied_to = scope:alliance_actor }
		}
		scope:alliance_actor = {
			create_alliance = {
				target = prev
				allied_through_owner = scope:alliance_actor
				allied_through_target = prev
			}
		}
	}
}
break_alliances_with_faction_effect = {
	every_in_global_list = {
		variable = $MEMBERS$
		limit = {
			NOT = { this = prev }
			is_allied_to = prev
			NOT = { is_any_family_relation_or_spouse_trigger = { CHARACTER = prev } }
		}
		break_alliance = prev
	}
}