#Sets up the Outcome Roll values
stasis_trap_outcome_roll_setup_effect = {
	#Discovery Roll setup
	save_scope_value_as = {
		name = discovery_chance
		value = {
			value = 100
			subtract = scope:scheme.scheme_secrecy
		}
	}
}

#Roll to check whether a Stasis Trap Scheme is a success or a failure, and whether the owner is discovered
stasis_trap_outcome_roll_effect = {
	#SUCCESS ROLL
	random = {
		chance = scope:scheme.scheme_success_chance
		custom_tooltip = stasis_trap_successful_roll_tt
		save_scope_value_as = {
			name = scheme_successful
			value = yes
		}
	}
	### End Success roll
	#DISCOVERY ROLL
	custom_label = stasis_trap_success_discovery_tt
	random = {
		chance = scope:discovery_chance
		custom_tooltip = stasis_trap_become_discovered_roll_tt
		save_scope_value_as = {
			name = scheme_discovered
			value = yes
		}
	}
	### End Discovery roll

	hidden_effect = {
		#FIRE CORRECT ON ACTIONS
		if = {
			limit = {
				exists = scope:scheme_successful
			}
			trigger_event = {
				on_action = stasis_trap_succeeded
			}
		}
		else = {
			trigger_event = {
				on_action = stasis_trap_failed
			}
		}
	}
}


#Used in the immediate of the Scheme Owner's success event
stasis_trap_success_effect = {
	
	scope:target = {
		save_scope_value_as = {
			name = scheme_discovered
			value = $DISCOVERED$
		}

		trigger_event = stasis_trap_outcome.5001
	}

	stun_character_effect = {
		TARGET = scope:target
		STUNNER = scope:owner
	}
}


stasis_trap_failure_effect = {
	#Add Watchful Modifier to the target
	scope:target = {
		show_as_tooltip = {
			add_character_modifier = {
				modifier = watchful_modifier
				days = watchful_modifier_duration
			}
		}
	}

	scope:target = {
		trigger_event = stasis_trap_outcome.5002
	}
}

successful_stasis_trap_outcome_event_option_effect = {
	if = {
		limit = {
			faith = {
				has_doctrine_parameter = piety_gain_from_successful_intrigue_schemes
			}	
		}
		add_piety = minor_piety_gain
	}

	scope:scheme = {
		end_scheme = yes
	}
}

stun_character_effect = {
	$TARGET$ = { save_temporary_scope_as = new_target }
	$STUNNER$ = { save_temporary_scope_as = stunner }

	scope:new_target = {
		add_character_modifier = {
			modifier = stasis_trap_stunned
			years = 3
		} 
	}

	hidden_effect = {
		#Disband any scheme you have against them
		scope:stunner = {
			if = {
				limit = {
					any_scheme = {
						scheme_target = scope:new_target
					}
				}
				every_scheme = {
					limit = {
						scheme_target = scope:new_target
					}
					end_scheme = yes
				}
			}
		}

		#Send break up event if they are your lover
		scope:stunner = {
			if = {
				limit = {
					has_relation_lover = scope:new_target
					NOT = { has_relation_rival = scope:new_target } #To enable really strange love stories
				}
				scope:new_target = {
					trigger_event = {
						id = lover.0101
						days = { 14 30 }
					}
				}
			}
		}
	}
}

dont_excecute_scheme_effect = {
	scope:scheme = {
		add_scheme_progress = -10 # Reset scheme progress
	}

	stress_impact = {
		impatient = medium_stress_impact_gain
		stubborn = medium_stress_impact_gain
	}
}

abandon_scheme_effect = {
	scope:scheme = {
		end_scheme = yes
	}

	stress_impact = {
		stubborn = medium_stress_impact_gain
	}
}

restart_scheme_effect = {
	play_music_cue = "mx_cue_stress"
	custom_tooltip = restart_scheme_tt
	
	scope:scheme = {
		add_scheme_progress = -10 # Reset scheme progress
	}
}