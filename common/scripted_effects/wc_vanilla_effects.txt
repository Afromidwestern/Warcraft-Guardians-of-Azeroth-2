send_death_notifications_effect = {
	save_scope_value_as = { name = type value = flag:$TYPE$ }
	save_scope_as = dead_character
	
	if = {
		limit = {
			is_in_prison_type = dungeon
			exists = imprisoner
		}
		imprisoner = {
			save_scope_as = prison_holder
		}
	}
	else_if = {
		limit = {
			is_in_prison_type = house_arrest
		}
		imprisoner = {
			save_scope_as = house_arrest_holder
		}
	}
	
	#Send event about relevant death to consorts
	every_consort = {
		limit = { death_management_0001_valid_for_death_event_trigger = yes }
		add_to_list = send_death_management_0002

		#If heir's spouse dies
		if = {
			limit = {
				any_parent = {
					exists = primary_heir
					primary_heir = { is_consort_of = scope:dead_character }
					death_management_0001_valid_for_death_event_trigger = yes
				}
			}
			random_parent = {
				limit = {
					exists = primary_heir
					primary_heir = { is_consort_of = scope:dead_character }
					death_management_0001_valid_for_death_event_trigger = yes
					any_courtier = { is_consort_of = scope:dead_character }
					is_ai = no #priority to players, who are the only people these are *really* relevant for
				}
				alternative_limit = {
					exists = primary_heir
					primary_heir = { is_consort_of = scope:dead_character }
					death_management_0001_valid_for_death_event_trigger = yes
					is_ai = no #priority to players, who are the only people these are *really* relevant for
				}
				alternative_limit = {
					exists = primary_heir
					primary_heir = { is_consort_of = scope:dead_character }
					death_management_0001_valid_for_death_event_trigger = yes
				}
				primary_heir = { save_scope_as = spouse_of_dead_character }
				save_scope_as = parent_of_spouse_of_dead_character
				add_to_list = send_death_management_0002
			}
		}
	}
	#Send event about relevant death to betrothed
	if = {
		limit = { exists = betrothed }
		betrothed = {
			if = {
				limit = { death_management_0001_valid_for_death_event_trigger = yes }
				add_to_list = send_death_management_0002
			}
			save_scope_as = betrothed_of_dead_character
			add_to_list = send_death_management_0002_betrothed
			random_parent = { #The parent who most likely set up/agreed to the betrothal
				limit = {
					any_courtier = { this = scope:betrothed_of_dead_character }
					death_management_0001_valid_for_death_event_trigger = yes
					is_ai = no #priority to players, who are the only people these are *really* relevant for
				}
				alternative_limit = {
					any_courtier = { this = scope:betrothed_of_dead_character }
					death_management_0001_valid_for_death_event_trigger = yes
				}
				save_scope_as = parent_of_betrothed_of_dead_character
				add_to_list = send_death_management_0002
			}
		}	
	}
	#Send event about relevant death to parents
	every_parent = {
		limit = { death_management_0001_valid_for_death_event_trigger = yes }
		add_to_list = send_death_management_0002
	}

	#Send event about relevant death to "predecessor" if heir
	if = {
		limit = {
			any_heir_title = {
				count >= 1
			}
		}
		every_heir_title = {
			limit = { exists = holder }
			holder = {
				if = {
					limit = {
						player_heir = scope:dead_character
						NOT = {
							is_in_list = title_holder_list
						}
						death_management_0001_valid_for_death_event_trigger = yes
					}
					add_to_list = title_holder_list
				}
			}
		}
	}
	every_in_list = {
		list = title_holder_list
		add_to_list = send_death_management_0002
	}

	#Send event about relevant death to children
	every_child = {
		limit = { death_management_0001_valid_for_death_event_trigger = yes }
		add_to_list = send_death_management_0002
	}
	#Send event about relevant death to siblings
	every_sibling = {
		limit = { death_management_0001_valid_for_death_event_trigger = yes }
		add_to_list = send_death_management_0002
	}
	#Send event about relevant death to lovers
	every_relation = {
		type = lover
		limit = {
			is_alive = yes
			death_management_0001_valid_for_death_event_trigger = yes
		}
		add_to_list = send_death_management_0002_lover
		if = {
			limit = {
				OR = {
					has_relation_soulmate = scope:dead_character
					has_opinion_modifier = {
						target = scope:dead_character
						modifier = love_opinion
						value >= 40
					}
				}
			}
			add_character_flag = {
				flag = important_lover
				days = 3
			}
		}
		add_to_list = send_death_management_0002
	}
	#Send event about relevant death to friends
	every_relation = {
		type = friend
		limit = {
			is_alive = yes
			death_management_0001_valid_for_death_event_trigger = yes
			NOT = { has_relation_best_friend = scope:dead_character }
		}
		add_to_list = send_death_management_0002_friend
		add_to_list = send_death_management_0002
	}
	#Send event about relevant death to friends
	every_relation = {
		type = best_friend
		limit = {
			is_alive = yes
			death_management_0001_valid_for_death_event_trigger = yes
		}
		add_to_list = send_death_management_0002_best_friend
		add_to_list = send_death_management_0002
	}
	#Send event about relevant death to rivals
	every_relation = {
		type = rival
		limit = {
			is_alive = yes
			death_management_0001_valid_for_death_event_trigger = yes
		}
		add_to_list = send_death_management_0002_rival
		add_to_list = send_death_management_0002
	}
	#Send event about relevant death to Wards
	every_relation = {
		type = ward
		limit = {
			is_alive = yes
		}
		if = {
			limit = { is_foreign_court_guest = yes }
			return_to_court = yes
		}
		if = {
			limit = { death_management_0001_valid_for_death_event_trigger = yes }
			add_to_list = send_death_management_0002
		}

		#Send event about relevant death to Ward's parent if they have no other relationship to the Educator
		every_parent = {
			limit = {
				is_ai = no
				is_alive = yes
				death_management_0001_valid_for_death_event_trigger = yes
			}
			add_to_list = send_death_management_0002 #Child's educator's death notification
		}
	}
	#For liege if they're a councillor
	if = {
		limit = {
			exists = liege
			liege = {
				NOT = {
					this = root
				}
				death_management_0001_valid_for_death_event_trigger = yes
			}
			is_councillor_of = liege
		}
		liege = {
			save_scope_as = liege_of_dead_character_councillor
			add_to_list = send_death_management_0002
		}
	}
	##For liege if they're a powerful vassal
	#if = {
	#	limit = {	
	#		exists = liege
	#		liege = {
	#			NOT = {
	#				this = root
	#			}
	#			death_management_0001_valid_for_death_event_trigger = yes
	#		}
	#		is_powerful_vassal_of = liege
	#	}
	#	liege = {
	#		save_scope_as = liege_of_dead_character
	#		add_to_list = send_death_management_0002
	#	}
	#}

	#Check for a prison owner
	if = {
		limit = {
			exists = scope:prison_holder
		}
		scope:prison_holder = {
			if = {
				limit = { death_management_0001_valid_for_death_event_trigger = yes }
				add_to_list = send_death_management_0002
			}
		}
	}

	#For pinned characters
	every_pinning_character = {
		limit = { death_management_0001_valid_for_death_event_trigger = yes }
		add_to_list = send_death_management_0002
	}

	#Send death_management.0002
	every_in_list = {
		limit = {
			OR = {
				scope:type = flag:death
				faith = { being_is_illegal_or_shunned_trigger = { BEING = being_undead } } #Only faiths that consider undead crime or shunned get notification
			}
		}
		list = send_death_management_0002

		# Calculate and save how much stress we should gain/lose from this character's death.
		calculate_stress_gain_loss_from_deceased_character_effect = {
			DYING_CHARACTER = root
		}

		# Queue up a death notification event.
		trigger_event = {
			id = death_management.0002
			delayed = yes
		}

		#To block any death notification  events sent after this for 3 days
		add_death_event_blocker_effect = { DEAD = root } 
	}
}

# Calculates how much Stress a character should gain/lose from the death of someone they care about (in some fashion, love or hate) and saves that value for later event usage.
# This must be run before the character actually dies, as death removes all extant relationships and opinion modifiers.
calculate_stress_gain_loss_from_deceased_character_effect = {
	save_scope_value_as = {
		name = deceased_character_stress
		value = {
			if = {
				# Dying character was extremely close to this character.
				limit = {
					OR = {
						has_relation_soulmate = $DYING_CHARACTER$
						has_relation_best_friend = $DYING_CHARACTER$
					}
				}
				value = major_stress_gain
			}
			else_if = {
				# Dying character was close and/or otherwise important to this character.
				limit = {
					OR = {
						has_relation_lover = $DYING_CHARACTER$
						has_relation_friend = $DYING_CHARACTER$
						reverse_opinion = {
							target = $DYING_CHARACTER$
							value >= 75
						}
					}
				}
				value = medium_stress_gain
			}
			else_if = {
				# Dying character was strongly disliked, rivaled, or was an obstacle to this character's ambitions.
				limit = {
					OR = {
						has_relation_rival = $DYING_CHARACTER$
						reverse_opinion = {
							target = $DYING_CHARACTER$
							value < -20
						}
						AND = {
							is_heir_of = $DYING_CHARACTER$
							ai_greed >= 50
						}
					}
					AND = {
						NOT = {
							has_trait = forgiving
						}
					}
				}
				value = minor_stress_loss
			}
			else = {
				# Dying character was only moderately important to this character (siblings who weren't very close, for example).
				# Characters who are less important than this shouldn't gain/lose stress at all (councillors, vassals, lieges, etc.).
				value = minor_stress_gain
			}

			# Callous characters are less affected by the deaths of others, both positively and negatively.
			if = {
				limit = { has_trait = callous }
				multiply = 0.5
			}
			# Sadistic and Vengeful characters are fully affected (but will probably have fewer friends and more enemies to begin with).
		}
	}
	
}