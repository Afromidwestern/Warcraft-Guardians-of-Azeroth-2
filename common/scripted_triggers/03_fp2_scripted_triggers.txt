##################################################
# General Triggers
 
fp2_should_use_iberian_graphics_trigger = {
	culture = { has_building_gfx = iberian_building_gfx }
}

wc_character_any_involvement_lordaeron_struggle_trigger = {
	wc_character_involved_in_struggle_trigger = yes
	wc_character_interloper_in_struggle_trigger = yes
}
 
character_any_involvement_lordaeron_struggle_trigger = {
	OR = {
		character_involved_in_lordaeron_struggle_trigger = yes
		character_interloper_in_lordaeron_struggle_trigger = yes
	}
}

character_involved_in_lordaeron_struggle_trigger = {
	any_character_struggle = {
		involvement = involved
		is_struggle_type = lordaeron_struggle
	}
}

character_interloper_in_lordaeron_struggle_trigger = {
	any_character_struggle = {
		involvement = interloper
		is_struggle_type = lordaeron_struggle
	}
}

character_uninvolved_in_lordaeron_struggle_trigger = {
	exists = struggle:lordaeron_struggle
	character_involved_in_lordaeron_struggle_trigger = no
	character_interloper_in_lordaeron_struggle_trigger = no
}

eligible_for_fp2_dynasty_legacies_trigger = {
	has_fp2_dlc_trigger = yes
	dynasty = {
		#OR = {
			dynast = {
		#		OR = {
					culture = {
						OR = {
							has_cultural_pillar = heritage_arathi
							has_cultural_pillar = heritage_goblin
							has_cultural_pillar = heritage_gnomish
						}
					}
		#			AND = {
		#				exists = capital_province
		#				capital_province = {
		#					geographical_region = world_lordaeron_struggle
		#				}
		#			}
		#		}
			}
		#}
	}
}

# TODO Do we still need this?
is_toledo_ownership_valid_trigger = {
	always = no
}

##################################################
# Cultural & Regional Triggers

culture_valid_for_ritualised_best_friends_trigger = {
	culture = { has_cultural_parameter = strong_hooks_and_stress_effects_best_friends }
}

valid_ritualised_best_friendship_two_way_trigger = {
	$ACTOR_FRIEND$ = {
		# Check that they have the appropriate cultural parameter...
		culture_valid_for_ritualised_best_friends_trigger = yes
		# ... and that they've still got a best friend...
		any_relation = {
			type = best_friend
			this = $RECIPIENT_FRIEND$
			# ... who also still has the cultural parameter.
			culture_valid_for_ritualised_best_friends_trigger = yes
		}
	}
}

valid_ritualised_best_friendship_one_way_trigger = {
	$ACTOR_FRIEND$ = {
		# Check that they have the appropriate cultural parameter...
		culture_valid_for_ritualised_best_friends_trigger = yes
		# ... and that they've got a best friend...
		any_relation = {
			type = best_friend
			count >= 1
			# ... who also still has the cultural parameter.
			culture_valid_for_ritualised_best_friends_trigger = yes
		}
	}
}

##################################################
# Illustration Triggers



##################################################
# Interaction Triggers

# TODO study and update this
has_any_best_friend_synergy_bonus_modifier_trigger = {
	OR = {
		has_character_modifier = fp2_single_synergy_diplomacy_modifier
		has_character_modifier = fp2_single_synergy_martial_modifier
		has_character_modifier = fp2_single_synergy_stewardship_modifier
		has_character_modifier = fp2_single_synergy_intrigue_modifier
		has_character_modifier = fp2_single_synergy_learning_modifier
		has_character_modifier = fp2_double_synergy_diplomacy_diplomacy_modifier
		has_character_modifier = fp2_double_synergy_diplomacy_martial_modifier
		has_character_modifier = fp2_double_synergy_diplomacy_stewardship_modifier
		has_character_modifier = fp2_double_synergy_diplomacy_intrigue_modifier
		has_character_modifier = fp2_double_synergy_diplomacy_learning_modifier
		has_character_modifier = fp2_double_synergy_martial_diplomacy_modifier
		has_character_modifier = fp2_double_synergy_martial_martial_modifier
		has_character_modifier = fp2_double_synergy_martial_stewardship_modifier
		has_character_modifier = fp2_double_synergy_martial_intrigue_modifier
		has_character_modifier = fp2_double_synergy_martial_learning_modifier
		has_character_modifier = fp2_double_synergy_stewardship_diplomacy_modifier
		has_character_modifier = fp2_double_synergy_stewardship_martial_modifier
		has_character_modifier = fp2_double_synergy_stewardship_stewardship_modifier
		has_character_modifier = fp2_double_synergy_stewardship_intrigue_modifier
		has_character_modifier = fp2_double_synergy_stewardship_learning_modifier
		has_character_modifier = fp2_double_synergy_intrigue_diplomacy_modifier
		has_character_modifier = fp2_double_synergy_intrigue_martial_modifier
		has_character_modifier = fp2_double_synergy_intrigue_stewardship_modifier
		has_character_modifier = fp2_double_synergy_intrigue_intrigue_modifier
		has_character_modifier = fp2_double_synergy_intrigue_learning_modifier
		has_character_modifier = fp2_double_synergy_learning_diplomacy_modifier
		has_character_modifier = fp2_double_synergy_learning_martial_modifier
		has_character_modifier = fp2_double_synergy_learning_stewardship_modifier
		has_character_modifier = fp2_double_synergy_learning_intrigue_modifier
		has_character_modifier = fp2_double_synergy_learning_learning_modifier
	}
}

purchase_truce_interaction_recipient_can_de_jure_war_actor_trigger = {
	scope:recipient = {
		OR = {
			has_cb_on = {
				target = scope:actor
				cb = de_jure_cb
			}
			has_cb_on = {
				target = scope:actor
				cb = individual_county_de_jure_cb
			}
			has_cb_on = {
				target = scope:actor
				cb = individual_duchy_de_jure_cb
			}
		}
	}
}

lordaeron_struggle_contract_assistance_war_winning_trigger = {
	trigger_if = {
		limit = {
			scope:recipient = { is_attacker_in_war = prev }
		}
		attacker_war_score >= offer_assistance_interaction_already_winning_value
	}
	trigger_else = { defender_war_score >= offer_assistance_interaction_already_winning_value }
}

lordaeron_struggle_contract_assistance_war_losing_trigger = {
	trigger_if = {
		limit = {
			scope:recipient = { is_attacker_in_war = prev }
		}
		defender_war_score >= offer_assistance_interaction_already_losing_value
	}
	trigger_else = { attacker_war_score >= offer_assistance_interaction_already_losing_value }
}

lordaeron_struggle_contract_assistance_war_outnumbering_trigger = {
 	trigger_if = {
		limit = {
			scope:recipient = { is_attacker_in_war = prev }
		}
		war_attacker_total_strength_halved_value > war_defender_total_strength_value
	}
	trigger_else = { war_defender_total_strength_halved_value > war_attacker_total_strength_value }
}

lordaeron_struggle_contract_assistance_war_outnumbered_trigger = {
 	trigger_if = {
		limit = {
			scope:recipient = { is_attacker_in_war = prev }
		}
		war_defender_total_strength_halved_value > war_attacker_total_strength_value
	}
	trigger_else = { war_attacker_total_strength_halved_value > war_defender_total_strength_value }
}

lordaeron_struggle_contract_assistance_war_outnumbered_minor_trigger = {
 	trigger_if = {
		limit = {
			scope:recipient = { is_attacker_in_war = prev }
		}
		war_defender_total_strength_value > war_attacker_total_strength_value
	}
	trigger_else = { war_attacker_total_strength_value > war_defender_total_strength_value }
}

lordaeron_struggle_contract_assistance_war_insufficient_trigger = {
	trigger_if = {
		limit = {
			scope:recipient = { is_attacker_in_war = prev }
		}
		scope:actor.max_military_strength < war_defender_total_strength_divided_value
	}
	trigger_else = { scope:actor.max_military_strength < war_attacker_total_strength_divided_value }
}

##################################################
# Religious Triggers



##################################################
# Achievement Triggers

##################################################
# Decision Triggers

##### Struggle Ending #####

### Common

# Checks a de  kingdom of Lordaeron is completely controlled
lordaeron_struggle_ending_hold_de_jure_kingdom_trigger = {
	title:e_lordaeron ?= {
		any_in_de_jure_hierarchy = {
			tier = tier_kingdom
			any_in_de_jure_hierarchy = {
				tier = tier_county
			}
			holder = root
			root = {
				completely_controls = prev
			}
		}
	}
}

lordaeron_struggle_ending_hold_percent_de_jure_kingdom_trigger = {
	title:e_lordaeron ?= {
		any_in_de_jure_hierarchy = {
			tier = tier_kingdom
			any_in_de_jure_hierarchy = {
				tier = tier_county
				holder.top_liege = root
				root = {
					completely_controls = prev
				}
				percent < .75
			}
			
		}
	}
}

# Checks less than half of Lordaeron owned
lordaeron_struggle_ending_percent_lordaeron_trigger = {
	any_county_in_region = {
		region = world_lordaeron_struggle
		percent < lordaeron_struggle_compromise_owned_percent_decimal_value
		holder.top_liege = root
	}
}

# Checks no more than half of Lordaeron is owned by another
lordaeron_struggle_ending_other_percent_lordaeron_trigger = {
	struggle:lordaeron_struggle = {
		NOT = {
			any_involved_ruler = {
				exists = primary_title # Max figured out that is_independent_ruler causes errors if you are unlanded
				NOT = { this = root }
				is_independent_ruler = yes
				primary_title = { is_mercenary_company = no }
				any_county_in_region = {
					region = world_lordaeron_struggle
					percent > lordaeron_struggle_compromise_involved_percent_decimal_value
					holder.top_liege = prev
				}
			}
		}
	}
}

# Checks duchy is held by an independent ruler who owns at least half of it
lordaeron_struggle_ending_compromise_independent_duchy_trigger = {
	tier = tier_duchy
	# Is created
	exists = holder
	OR = {
		# Is not the heartland of an existing kingdom
		NOT = { title_capital_county = de_jure_liege.title_capital_county }
		# Capital duke doesn't control kingdom, edge case
		AND = {
			exists = de_jure_liege.holder
			NOT = { holder = de_jure_liege.holder }
		}
	}
	# Is ruled by an independent duke
	holder = {
		is_independent_ruler = yes
		save_temporary_scope_as = duchy_holder
		primary_title = {
			is_mercenary_company = no
			OR = {
				tier = tier_duchy
				tier = tier_kingdom
			}
		}
	}
	OR = {
		this = holder.primary_title
		holder.primary_title.tier = tier_kingdom
	} 
	# Duke rules at least half the de jure duchy
	any_direct_de_jure_vassal_title = {
		percent >= 0.5
		holder.top_liege = scope:duchy_holder
	}
}

# Checks duchy should be split from de jure kingdom
lordaeron_struggle_ending_compromise_split_duchy_trigger = { 
	tier = tier_duchy
	# Has not been tampered with already
	NOT = { is_in_list = duchy_kingdom } 
	# Is not created
	NOT = { exists = holder } 
	# Is not heartland of an existing kingdom
	NOT = { title_capital_county = de_jure_liege.title_capital_county } 
	save_temporary_scope_as = duchy
	# Less than half is owned by de jure kingdom, if created
	trigger_if = { 
		limit = { exists = scope:duchy.de_jure_liege.holder }
		any_direct_de_jure_vassal_title = {
			percent < 0.5
			holder.top_liege = scope:duchy.de_jure_liege.holder.top_liege
		}
	}
	trigger_else = { always = no }
}

# Checks titular duchy should be made into de jure kingdom
lordaeron_struggle_ending_compromise_titular_trigger = {
	# Has not been tampered with already
	NOT = { is_in_list = duchy_kingdom }
	# Is created
	exists = holder
	# Is ruled by an independent duke
	holder = {
		is_independent_ruler = yes
		primary_title = {
			is_mercenary_company = no
			tier = tier_duchy
		}
	}
	# Titular duke holds at least half of any de jure duchy of Hispania
	title:e_lordaeron = {
		any_in_de_jure_hierarchy = {
			tier = tier_duchy
			any_direct_de_jure_vassal_title = {
				percent >= 0.5
				holder.top_liege = scope:special_duchy.holder
			}
		}
	}
}

# Should title be created by ststus quo decision?
lordaeron_struggle_ending_compromise_create_title_trigger = {
	NOR = {
		this = title:e_lordaeron
		exists = holder
		is_in_list = assigned_title
		# Only if no other same rank rulers in title (e.g. multiple kings under empire)
		any_direct_de_jure_vassal_title = {
			exists = holder
			NOT = { holder = scope:new_owner_temp }
		}
	}
}

# Checks two cultures were Involved in the struggle that ended in Conciliation
lordaeron_struggle_conciliation_special_cultural_rules_trigger = {
	has_global_variable = lordaeron_struggle_conciliation_ending
	any_in_global_list = {
		variable = lordaeron_struggle_ending_culture_list
		this = $C1$.culture
	}
	any_in_global_list = {
		variable = lordaeron_struggle_ending_culture_list
		this = $C2$.culture
	}
}

lordaeron_struggle_faith_is_scarlet_trigger = {
	this = faith:scarlet_light
}

# Checks two faiths were Involved in the struggle that ended in Conciliation
are_holy_wars_disabled_by_struggle_conciliation_trigger = {
	has_global_variable = lordaeron_struggle_conciliation_ending
	any_in_global_list = {
		variable = lordaeron_struggle_ending_faith_list
		this = scope:attacker.faith
	}
	any_in_global_list = {
		variable = lordaeron_struggle_ending_faith_list
		this = scope:defender.faith
	}
}

# Checks if characters were both involved in struggle
lordaeron_struggle_conciliation_recipient_actor_involved_trigger = {
	has_global_variable = lordaeron_struggle_conciliation_ending
	AND = {
		scope:actor.capital_province = { geographical_region = world_lordaeron_struggle }
		scope:recipient.capital_province = { geographical_region = world_lordaeron_struggle }
		# Offer comes from an Involved culture/faith character
		OR = {
			any_in_global_list = {
				variable = lordaeron_struggle_ending_faith_list
				this = scope:actor.faith
			}
			any_in_global_list = {
				variable = lordaeron_struggle_ending_culture_list
				this = scope:actor.culture
			}
		}
		# Recipient is from an Involved culture/faith
		OR = {
			any_in_global_list = {
				variable = lordaeron_struggle_ending_faith_list
				this = scope:recipient.faith
			}
			any_in_global_list = {
				variable = lordaeron_struggle_ending_culture_list
				this = scope:recipient.culture
			}
		}
	}
}

# Checks if character was involved in struggle
lordaeron_struggle_conciliation_scope_uninvolved_trigger = {
	has_global_variable = lordaeron_struggle_conciliation_ending
	OR = {
		NOR = {
			any_in_global_list = {
				variable = lordaeron_struggle_ending_faith_list
				this = $SCOPE$.faith
			}
			any_in_global_list = {
				variable = lordaeron_struggle_ending_culture_list
				this = $SCOPE$.culture
			}
		}
		NOT = {
			$SCOPE$.capital_province = { geographical_region = world_lordaeron_struggle }
		}
	}
}

lordaeron_struggle_compromise_transfer_duchy_trigger = {
	tier = tier_duchy
	save_temporary_scope_as = transfer_duchy 
	# Duchy is completely controlled by its capital's holder's top_liege
	exists = title_capital_county.holder.top_liege
	title_capital_county.holder.top_liege = { completely_controls = scope:transfer_duchy }
	# De jure liege does not control duchy
	trigger_if = {
		limit = { exists = kingdom.holder }
		NOT = { kingdom = scope:transfer_duchy.title_capital_county.holder.top_liege.capital_county.kingdom }
	}
	# Is controlled by a kingdom tier
	trigger_else = { title_capital_county.holder.top_liege.primary_title.tier >= tier_kingdom }
	# Duchy is connected de_jure to holders kingdom
	any_de_jure_county = {
		any_title_to_title_neighboring_and_across_water_county = {
			exists = kingdom.holder
			kingdom.holder = scope:transfer_duchy.title_capital_county.holder.top_liege
		}
	}
}

lordaeron_struggle_secure_lordaeron_foothold_lordaeron_kingdom_trigger = {
	tier = tier_kingdom
	de_jure_liege = title:e_lordaeron
	root = { completely_controls = prev }
	save_temporary_scope_as = lordaeron_kingdom_temp
}

lordaeron_struggle_secure_lordaeron_foothold_faith_trigger = {
	lordaeron_struggle_secure_lordaeron_foothold_faith_percent_value >= lordaeron_struggle_secure_lordaeron_foothold_faith_target_percent_value
}

lordaeron_struggle_secure_lordaeron_foothold_outsider_kingdom_trigger = {
	any_de_jure_county = {
		any_title_to_title_neighboring_and_across_water_county = {
			NOT = { empire = title:e_lordaeron }
			kingdom.holder = root
		}
	}
}

lordaeron_struggle_lordaeron_reclamation_should_vassalize_trigger = {
	any_character_struggle = { is_struggle_type = lordaeron_struggle }
	any_held_title = { tier < scope:attacker.primary_title.tier }
	any_realm_county = {
		count = all
		duchy = { is_in_list = target_titles }
		any_county_struggle = { is_struggle_type = lordaeron_struggle }
	}
}

lordaeron_struggle_any_realm_county_in_lordaeron_trigger = {
	any_realm_county = { target_is_de_jure_liege_or_above = title:e_lordaeron }
}

lordaeron_reclamation_vassalize_lordaeron_trigger = {
	tier = tier_county
	holder = {
		any_character_struggle = {
			involvement = involved
			is_struggle_type = lordaeron_struggle
		}
		liege = scope:defender
		NOT = { this = scope:defender }
		capital_county = {
			any_county_struggle = { is_struggle_type = lordaeron_struggle }
		}
	}
}

lordaeron_reclamation_involved_county_trigger = {
	any_realm_county = {
		any_county_struggle = { is_struggle_type = lordaeron_struggle }
	}
}

lordaeron_reclamation_vassalize_vassal_trigger = {
	primary_title.tier >= tier_county
	primary_title.tier < scope:attacker.primary_title.tier
	any_character_struggle = { is_struggle_type = lordaeron_struggle }
	capital_county = {
		duchy = { is_in_list = target_titles }
	}
	any_sub_realm_county = {
		count = all
		duchy = { is_in_list = target_titles }
		any_county_struggle = { is_struggle_type = lordaeron_struggle }
	}
}

lordaeron_struggle_enforce_truce_war_leader_trigger = {
	custom_tooltip = {
		text = fp2_enforce_truce_war_with_not_involved_tt
		any_character_struggle = {
			involvement = involved
		}
	}
	custom_tooltip = {
		text = fp2_enforce_truce_tier_difference_tt
		tier_difference = {
			target = scope:actor
			value <= 0
		}
	}
	NOR = {
		this = scope:recipient
		this = scope:actor
	}
	custom_tooltip = {
		text = fp2_enforce_truce_liege_or_independent_tt
		OR = {
			scope:recipient = { is_independent_ruler = yes }
			scope:recipient.top_liege = scope:actor.top_liege
			is_independent_ruler = yes
			top_liege = scope:actor.top_liege
		}
	}
}

wc_bargain_fealty_war_outnumbered_trigger = {
	war_attacker_total_strength_halved_value > scope:recipient.max_military_strength
}

wc_bargain_fealty_war_losing_trigger = {
	attacker_war_score >= 25
}

# We use a hard trigger so that this can be easily adjusted without overwriting the rest of the fp2_interactions file by modders.
struggle_can_access_unlocks_bargain_fealty_interaction_trigger = {
	# Just uhh, use an OR if you add something else.
	is_struggle_type = lordaeron_struggle
}

##################################################
# Multi-File Event Triggers

fp2_lyonese_monk_0002_papal_hof_trigger = {
	always = no
}

fp2_lyonese_monk_0002_valid_character_configuration_trigger = {
	OR = {
		has_trait = scholar
		has_trait = theologian
		has_trait = lifestyle_mystic
		AND = {
			is_ai = no
			learning >= very_high_skill_rating
			has_lifestyle = learning_lifestyle
		}
	}
}

fp2_lyonese_monk_0002_valid_court_trigger = {
	always = no
}

fp2_lyonese_monk_0000_valid_for_events_trigger = {
	always = no
}

fp2_lyonese_monk_0000_out_of_realm_trigger = {
	always = no
}

fp2_lyonese_monk_0000_out_of_freedom_trigger = { always = no }

fp2_lyonese_monk_0000_out_of_popes_trigger = {
	always = no
}

fp2_lyonese_monk_0000_out_of_faith_trigger = {
	always = no
}

wc_does_this_player_care_about_the_fate_of_lordaeron = {
	NOT = { this = root }
	OR = {
		location = {
			geographical_region = world_eastern_kingdoms
		}
		struggle:lordaeron_struggle = { is_culture_involved_in_struggle = culture }
	}
}

fp2_eligible_for_yearly_events_trigger = {
	always = no
}
