#Events for Plague Scheme Outcomes

namespace = plague_outcome

##################################
# MAINTENANCE EVENTS 0000 - 0099
##################################

plague_outcome.0001 = {

	hidden = yes

	immediate = {
		add_character_flag = { #To make sure you never resolve two murders at once
			flag = is_in_event_plague_outcome_0001
			days = 1
		}
		trigger_event = {
			#Run the setup for the chosen execution type.
			on_action = plague_method_selection
		}
	}
}



#################
# METHOD SELECTION EVENTS
# 0100-0199
#################
# These are used to pick out the plaguing method.

# Everyone turns into an undead
# by SolTsuki
plague_outcome.0101 = {
	type = character_event
	hidden = yes

	weight_multiplier = {
		base = 1
	}

	immediate = {
		save_scope_value_as = {
			name = plague_method
			value = flag:undead_conversion
		}
		trigger_event = { on_action = plague_setup }
	}
}

# #######################################
# # "REGULAR" PLAGUING SETUPS 1000 - 1999
# #######################################
# # Whichever event is randomly rolled here determines what form the event takes.
# # Remember to set flags for reference when generating event text in success or failure event.

# #Setup for everyone turning into an undead
plague_outcome.1001 = {
	title = plague_outcome.1001.t
	desc = plague_outcome.1001.d
	theme = corruption
	override_background = {
		event_background = dungeon
	}
	left_portrait = scope:owner
	right_portrait = scope:target

	trigger = {
		scope:plague_method = flag:undead_conversion
	}

	immediate = {
		plague_outcome_roll_setup_effect = yes
	}

	option = {
		name = plague_outcome.1001.a
		plague_outcome_roll_effect = yes
		stress_impact = {
			arbitrary = minor_stress_impact_loss
			compassionate = medium_stress_impact_gain
			gregarious = minor_stress_impact_gain
		}
	}

	option = {
		name = murder_outcome.1001.b
		ai_chance = {
			base = 0
		}
		scope:scheme = {
			add_scheme_progress = decline_plague_setback
		}
		stress_impact = {
			impatient = medium_stress_impact_gain
		}
		custom_tooltip = do_not_execute_plague_tooltip
	}
}

# #####################################
# # SUCCESSFUL OUTCOME 2000 - 2999
# #####################################

# ########################
# # Undead conversion
# # by SolTsuki
# ########################

plague_outcome.2000 = {
	type = character_event
	title = plague_outcome.2000.t
	desc = plague_outcome.2000.desc
	theme = corruption
	override_background = {
		event_background = dungeon
	}

	left_portrait = scope:owner
	right_portrait = scope:target

	trigger = {
		scope:plague_method = flag:undead_conversion
	}

	immediate = {
		plague_success_effect = yes
	}

	option = {
		name = plague_outcome.2000.a
		successful_plague_outcome_event_option_effect = yes
	}
}

###############################
# FAILURE OUTCOMES 4000 - 4999
###############################

#######################
# Undead Conversion
#######################
plague_outcome.4001 = {
	type = character_event
	title = plague_outcome.4001.t
		### START DESC
		desc = {
			# Start off with declaration of failure
			# Include Target's name!
			random_valid = {
				desc = plague_outcome.4001.failure_declaration_1
				desc = plague_outcome.4001.failure_declaration_2
				desc = plague_outcome.4001.failure_declaration_3
			}
		
			desc = plague_outcome.4001.desc

			first_valid = {
				triggered_desc = {
					trigger = {
						exists = scope:scheme_discovered
					}
					desc = plague_outcome.4001.exposed_scheme
				}
				desc = plague_outcome.4001.not_exposed_scheme
			}
		}
	### END DESC
	theme = corruption
	override_background = {
		event_background = dungeon
	}
	left_portrait = {
		character = scope:owner
		animation = rage
	}
	right_portrait = {
		character = scope:target
		animation = shock
	}

	trigger = {
		scope:plague_method = flag:undead_conversion
	}

	immediate = {
		# random_dummy_gender_assassin_effect = yes
		plague_failure_effect = yes
	}

	option = {
		name = {
			trigger = {
				exists = scope:scheme_discovered
			}
			text = plague_outcome.4001.a.discovered
		}
		name = {
			trigger = {
				NOT = { exists = scope:scheme_discovered }
			}
			text = plague_outcome.4001.a
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
		}
	}

	option = {
		name = plague_outcome.4001.b
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				add_dread = minor_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
	}

	after = {
		hidden_effect = {
			trigger_event = plague_outcome.9999
		}
	}
}

# ############################################
# # YOU GOT (ATTEMPTED?) PLAGUED 5000 - 5999
# ############################################

#You've been plagued
plague_outcome.5001 = {
	type = character_event
	title = plague_outcome.5001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:plague_method = flag:undead_conversion
				}
				desc = plague_outcome.5001.undead_conversion
			}
		}
		triggered_desc = {
			trigger = {
				exists = scope:scheme_discovered
				NOT = {
					has_trait = incapable #No notification of identity for Incapable characters
				}
			}
			desc = plague_outcome.5001.schemer_known
		}
	}
	theme = corruption
	override_background = {
		event_background = dungeon
	}
	left_portrait = {
		character = scope:owner_to_reveal
		animation = schadenfreude
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
				exists = scope:owner_to_reveal
			}
			scope:owner_to_reveal = {
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
		}
		
		plague_success_turn_undead_effect = yes
	}

	option = {
		name = plague_outcome.5001.cleanse_land
		trigger = {
			exists = scope:scheme_discovered
			is_adult = yes
		}
	}

	option = {
		name = plague_outcome.5001.uncertain
		trigger = {
			OR = {
				NOT = { exists = scope:uncertain }
				scope:target = { is_adult = no }
			}
		}
		exclusive = yes
	}

	option = {
		name = plague_outcome.5001.option_incapable
		trigger = {
			scope:target = { has_trait = incapable }
		}
		exclusive = yes
	}
}

########################
# Scheme End Handling
########################
plague_outcome.9999 = {
	type = character_event
	hidden = yes

	immediate = {
		if = {
			limit = {
				exists = scope:restart_scheme
				exists = scope:scheme
			}
			scope:scheme = {
				add_scheme_progress = -10
			}
		}
		else_if = {
			limit = {
				exists = scope:scheme
				exists = scope:target
				scope:target = { is_alive = yes }
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

#You've survived a murder attempt
plague_outcome.5002 = {
	title = plague_outcome.5002.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:plague_method = flag:used_poison
				}
				desc = plague_outcome.5002.poisoned_duck
			}
			triggered_desc = {
				trigger = {
					scope:plague_method = flag:hired_thugs
				}
				desc = plague_outcome.5002.gang_of_thugs
			}
			triggered_desc = {
				trigger = {
					scope:plague_method = flag:hired_assassin
				}
				desc = plague_outcome.5002.hired_assassin
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:riled_up_mob
				}
				desc = plague_outcome.5002.riled_up_mob
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:bricked
				}
				desc = plague_outcome.5002.bricked
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:sunken_boat
				}
				desc = plague_outcome.5002.sunken_boat
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:lured_into_forest
				}
				desc = plague_outcome.5002.lured_into_forest
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:stab_infant
				}
				desc = plague_outcome.5002.stab_infant
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:infant_creepy_crawly
				}
				desc = plague_outcome.5002.infant_creepy_crawly
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:poisoned_candy
				}
				desc = plague_outcome.5002.poisoned_candy
			}
			triggered_desc = {
			    trigger = {
			    	scope:murder_method = flag:child_pushed
					exists = scope:child_pushed_dog
			    }
			    desc = plague_outcome.5002.child_pushed_dog
			}
			triggered_desc = {
			    trigger = {
			    	scope:murder_method = flag:child_pushed
					exists = scope:child_pushed_cat
			    }
			    desc = plague_outcome.5002.child_pushed_cat
			}
			triggered_desc = {
			    trigger = {
			    	scope:murder_method = flag:child_pushed
					exists = scope:child_pushed_toy
			    }
			    desc = plague_outcome.5002.child_pushed_toy
			}
			triggered_desc = {
			    trigger = {
			    	scope:murder_method = flag:child_pushed
			    }
			    desc = plague_outcome.5002.child_pushed
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:beat_to_death_in_dungeon
				}
				desc = plague_outcome.5002.beat_to_death_in_dungeon
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:unwelcome_guest_house_arrest
				}
				desc = plague_outcome.5002.unwelcome_guest_house_arrest
			}
			triggered_desc = {
				trigger = {
					scope:murder_method = flag:strangle_incapable
				}
				desc = plague_outcome.5002.strangle_incapable
			}
		}
		triggered_desc = {
			trigger = {
				exists = scope:scheme_discovered
				NOT = { has_trait = incapable }
				# Warcraft
				age > age_8_value
			}
			desc = plague_outcome.5002.schemer_known
		}
	}
	theme = murder_scheme
	left_portrait = {
		character = root
		animation = shock
	}
	right_portrait = {
		character = scope:owner_to_reveal
		animation = anger
	}

	immediate = {
		if = {
			limit = {
				exists = scope:scheme_discovered
				exists = scope:owner_to_reveal
			}
			scope:owner_to_reveal = {
				add_character_flag = {
					flag = use_stealth_clothes
					days = 1
				}
			}
		}
	}

	option = {
		name = murder_outcome.5002.will_find_out
		trigger = {
			NOT = { exists = scope:scheme_discovered }
		}
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	option = {
		name = murder_outcome.5002.revenge_will_be_had
		trigger = {
			exists = scope:scheme_discovered
		}
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	option = {
		name = murder_outcome.5002.child
		trigger = {
			is_adult = no
			# Warcraft
			age >= age_2_value
		}
		exclusive = yes
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	option = {
		name = murder_outcome.5002.infant
		trigger = {
			# Warcraft
			age_in_relation_to_humans_less_than_trigger = { age = 2 }
		}
		exclusive = yes
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	option = {
		name = murder_outcome.5002.option_incapable
		trigger = {
			has_trait = incapable
		}
		exclusive = yes
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	after = {
		if = {
			limit = {
				exists = scope:owner_to_reveal
			}
			attempted_murder_opinion_effect = {
				VICTIM = root
				MURDERER = scope:owner_to_reveal
			}
		}
	}
}


# ########################
# # Scheme End Handling
# ########################
# murder_outcome.9999 = {
# 	type = character_event
# 	hidden = yes

# 	immediate = {
# 		if = {
# 			limit = {
# 				exists = scope:restart_scheme
# 				exists = scope:scheme
# 			}
# 			scope:scheme = {
# 				add_scheme_progress = -10
# 			}
# 		}
# 		else_if = {
# 			limit = {
# 				exists = scope:scheme
# 				exists = scope:target
# 				scope:target = { is_alive = yes }
# 			}
# 			scope:scheme = {
# 				end_scheme = yes
# 			}
# 		}
# 	}
# }
