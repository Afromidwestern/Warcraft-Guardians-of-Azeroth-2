# Events for saving from a murder attempt

namespace = plague_save

#Events:
# 0001 - Target saved from an assassin by a protective lover
# 0002 - Lover dies to a venomous creature instead of target
# 0003 - Target's Mindbreak character sacrifices themselves to stop an assassin
# 0004 - Target's warhorse saves them from hired thugs
# 0005 - Prison Pet saves target's life
# 0006 - Personal Guard saves target from Hired Thugs
# 0007 - Saved from creepy crawlies by cat
# 0008 - Saved from assassin by dog
# 0010 - Family Connections (Murder Save)
# 0011 - Saved from poisoned food by cat
# 0012 - Saved from poisoned food by dog


#############################
# Execution Events 0000 - 0999
#############################

#############################
# Saved from Assassin by Lover
# by Petter Vilberg
#############################
scripted_trigger plague_save_0001_lover_trigger = {
	is_landed = no
	is_ruler = no
	is_available_ai_adult = yes
	is_alive = yes
}

#For scheme owner
plague_save.0001 = {
	type = character_event
	title = plague_save.0001.t
	desc = {
		desc = plague_save.0001.opening
		triggered_desc = {
			trigger = {
				OR = {
					is_close_or_extended_family_of = scope:lover
					is_consort_of = scope:lover
					is_employer_of = scope:lover
					has_any_scripted_relation = scope:lover
				}
			}
			desc = plague_save.0001.rel_to_me
		}
		desc = plague_save.0001.end
	}
	
	theme = plague_scheme
	left_portrait = {
		character = scope:target
		animation = grief
	}
	right_portrait = {
		character = scope:lover
		animation = pain
	}
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:plague_method = flag:hired_assassin
		scope:target = {
			any_relation = {
				type = lover
				plague_save_0001_lover_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 1
			scope:target = {
				any_relation = {
					type = lover
					plague_save_0001_lover_trigger = yes
					OR = {
						has_opinion_modifier = {
							target = root
							modifier = love_opinion
						}
						has_relation_soulmate = root
					}
				}
			}
		}
		# Mortal Adoration Perk:
		mortal_adoration_murder_save_modifier = yes
	}

	immediate = {
		save_scope_value_as = {
			name = plague_saved
			value = flag:lover_stopped_plague
		}
		scope:target = {
			random_relation = {
				type = lover
				limit = {
					plague_save_0001_lover_trigger = yes
				}
				weight = {
					base = 1
					modifier = {
						add = 5
						OR = {
							has_opinion_modifier = {
								target = root
								modifier = love_opinion
							}
							has_relation_soulmate = root
						}
					}
				}
				save_scope_as = lover
			}
		}
		#random_dummy_gender_plague_effect
		random_dummy_gender_assassin_effect = yes
		plague_failure_effect = yes # Fires the response for the target

	}

	option = {
		name = plague_save.0001.a
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			scope:scheme = {
				end_scheme = yes
			}
		}
		ai_chance = {
			base = 100
		}
	}

	option = {
		name = plague_save.0001.b
		show_as_tooltip = {
			if = {
				limit = { exists = scope:scheme_discovered }
				add_dread = medium_dread_gain
			}
			start_scheme = {
				type = murder
				target = scope:target
			}
		}
		hidden_effect = {
			save_scope_value_as = {
				name = restart_scheme
				value = yes
			}
		}
		ai_chance = {
			base = 0
		}
	}

	after = {
		show_as_tooltip = {
			if = {
				limit = {
					exists = scope:scheme_discovered
				}
				known_plague_sacrifice_effect = {
					SACRIFICE = scope:lover
					PLAGUER = root
					EXPOSER = scope:target
				}
			}
			else = {
				unknown_plague_sacrifice_effect = {
					SACRIFICE = scope:lover
					PLAGUER = root
				}
			}
		}
		hidden_effect = {
			trigger_event = plague_outcome.9999
		}
	}
}

#####################################
# Victim Events
# 1000 - 1999
#####################################

# Saved by purifier 
plague_save.1001 = {
	type = character_event
	title = plague_save.0001.t
	desc = plague_save.1001.desc
	left_portrait = {
		character = root
		animation = grief
	}
	right_portrait = {
		character = scope:purifier
		animation = pain
	}
	lower_left_portrait = scope:owner_revealed
	theme = intrigue

	trigger = {
		exists = scope:plague_saved
		scope:plague_saved = flag:purifier_stopped_plague
	}

	immediate = {
		set_variable = {
			name = block_death_event_from
			value = scope:purifier
			days = 3
		}
		if = {
			limit = {
				exists = scope:scheme_discovered
			}
			scope:owner = {
				save_scope_as = owner_revealed
			}
			known_murder_effect = {
				VICTIM = scope:lover
				MURDERER = scope:owner
				EXPOSER = scope:target
			}
		}
		else = {
			# unknown_murder_effect = {
			# 	VICTIM = scope:lover
			# 	MURDERER = scope:owner
			# 	REASON = death_duel
			# }
		}
		# add_achievement_flag_effect = { FLAG = achievement_the_things_love_does_for_us_flag }
	}

	option = { #Who could do such a thing?
		name = plague_save.1001.a
		trigger = {
			NOT = {
				exists = scope:scheme_discovered
			}
		}
		custom_tooltip = plague_save.failure_unknown_owner_tt
	}

	option = { #Vengeance!
		name = plague_save.1001.b
		trigger = {
			exists = scope:scheme_discovered
		}
		custom_tooltip = plague_save.failure_known_owner_tt
	}

	option = { #Who could do such a thing?
		name = plague_save.1001.c
		trigger = {
			NOT = { exists = scope:scheme_discovered }
			OR = {
				has_trait = callous
				has_trait = sadistic
			}
		}
		exclusive = yes
		custom_tooltip = plague_save.failure_unknown_owner_tt
	}

	after = {
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}
}

#Murder succeeds
plague_save.9999 = {
	type = character_event
	hidden = yes

	immediate = {
		trigger_event = {
			on_action = plague_succeeded
		}
	}
}
